<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>small clever rooms</title>
    
    <link rel="alternate" href="http://ian.mccowan.space/" />
    <link rel="self" href="http://ian.mccowan.space/feed.xml" type="application/atom+xml" />
    <id>http://ian.mccowan.space/</id>
    <updated>2016-04-03T17:15:51Z</updated>
    
    <author>
        <name>Ian McCowan</name>
        <email>imccowan@gmail.com</email>
        <uri>http://ian.mccowan.space/</uri>
    </author>
    
    
        <entry>
            <title>MPD + Quicksilver on OS X</title>
            <link rel="alternate" href="http://ian.mccowan.space/2015/12/21/MPD_OSX/" type="text/html" />
            <id>http://ian.mccowan.space/2015/12/21/MPD_OSX/</id>
            <updated>2015-12-21T00:56:00Z</updated>
            
            <summary type="html">I don&amp;rsquo;t know about you, but I let iTunes manage my music on Mac OS X and have done so for years, 
since when it was only kind of bloated and annoying
instead of incredibly bloated and annoying like it is now.
So even though iTunes itself is &lt;a href=&#34;http://www.wired.com/2015/11/itunes-alternatives/&#34;&gt;kind of awful at this point&lt;/a&gt;,
all my music is organized the way iTunes likes to organize it,
and most options for buying music have iTunes integration.
iTunes is and has always been the path of least resistance
for music management on a Mac.</summary>
            <content type="html">&lt;p&gt;I don&amp;rsquo;t know about you, but I let iTunes manage my music on Mac OS X and have done so for years, 
since when it was only kind of bloated and annoying
instead of incredibly bloated and annoying like it is now.
So even though iTunes itself is &lt;a href=&#34;http://www.wired.com/2015/11/itunes-alternatives/&#34;&gt;kind of awful at this point&lt;/a&gt;,
all my music is organized the way iTunes likes to organize it,
and most options for buying music have iTunes integration.
iTunes is and has always been the path of least resistance
for music management on a Mac.&lt;/p&gt;

&lt;p&gt;But I don&amp;rsquo;t like using iTunes to play music anymore.
Hell, I don&amp;rsquo;t even like to have it open most of the time,
if I can avoid it.
So I use &lt;a href=&#34;http://www.musicpd.org&#34;&gt;mpd&lt;/a&gt; to play music instead.
It stands for &lt;strong&gt;m&lt;/strong&gt;usic &lt;strong&gt;p&lt;/strong&gt;layer &lt;strong&gt;d&lt;/strong&gt;aemon and it&amp;rsquo;s just a process that runs
constantly in the background and plays music when you ask it to.
It&amp;rsquo;s not very user-friendly out of the box.
With the help of the venerable and surprisingly still actually alive &lt;a href=&#34;https://qsapp.com&#34;&gt;Quicksilver&lt;/a&gt;,
I was able to make it more convenient and user-friendly.
I set up a &lt;a href=&#34;https://github.com/valrus/mpd_on_osx&#34;&gt;Git repository&lt;/a&gt; containing the helpers I used to set this up.&lt;/p&gt;

&lt;p&gt;My music playing needs are pretty minimal but I like to have them streamlined.
Here&amp;rsquo;s what this setup can do in one keystroke:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Search and play albums that iTunes knows about using Quicksilver&amp;rsquo;s fuzzy searching&lt;/li&gt;
&lt;li&gt;Get the name of the song being played&lt;/li&gt;
&lt;li&gt;Manage playback using media keys on a standard Apple keyboard&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unfortunately this path is not for the faint of heart.
You should be comfortable with a terminal for it.
At many points while setting it up
I got the feeling I was continuing to work on it
more out of sheer cussedness
than because I thought it would ultimately be worth the time I was putting in.
But now that I&amp;rsquo;ve blazed the trail maybe it will work a little better for you.
Many of the difficulties stemmed from figuring out which dark corners of Quicksilver
actually work as they&amp;rsquo;re supposed to,
so hopefully those won&amp;rsquo;t cause you the same difficulty.&lt;/p&gt;

&lt;p&gt;Good luck! If you try this, let me know about it on &lt;a href=&#34;http://twitter.com/valrus&#34;&gt;Twitter&lt;/a&gt;
or star (or open an issue on) my &lt;a href=&#34;https://github.com/valrus/mpd_on_osx&#34;&gt;GitHub repo&lt;/a&gt;!&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Mapping Grief By Reflections</title>
            <link rel="alternate" href="http://ian.mccowan.space/2015/10/15/Grief/" type="text/html" />
            <id>http://ian.mccowan.space/2015/10/15/Grief/</id>
            <updated>2015-10-15T04:07:00Z</updated>
            
            <summary type="html">I mostly grieve second-hand.</summary>
            <content type="html">&lt;p&gt;I mostly grieve second-hand.&lt;/p&gt;

&lt;p&gt;Some combination of societal pressure and natural personal inclination
seems to have inoculated me against the first-hand variety,
so that I can, for example, look at the following facts
directly in their loathsome faces
and be relatively unscathed by them:
My cat Einstein, the first cat who was really &lt;em&gt;mine&lt;/em&gt;,
rather than my family&amp;rsquo;s,
is sick and going to die.
The vet gave us a prognosis and at no point
was there a mention of any time span greater than six months.
We&amp;rsquo;re going to do what we can to spoil him and make him comfortable
in this twilight of his life,
and at some point —
perhaps when he is no longer happy enough to grace us with his legendary, bone-shaking purr —
we&amp;rsquo;ll have him put to sleep,
and then all we&amp;rsquo;ll have of him will be memories.&lt;/p&gt;

&lt;p&gt;Abstractly, it seems like those facts should be enough
to make me a quivering mass.
I mean, Einstein is like 18 now
and I&amp;rsquo;ve been dreading the inevitability of having his health take a turn
for probably a few years now.
But now I&amp;rsquo;m in the midst of it,
and how do I feel?
Well, pretty fucking bad, actually,
but mostly not in a sad way.
Instead I&amp;rsquo;m anxious and fretful and distractable
and I feel somehow &lt;em&gt;fragile&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The weird physical manifestation of this fragility
is sort of like a low-grade fever:
a feeling that my skin is tender,
like I have a mild sunburn on my chest and back.
(I assume the slight edge of nausea is from anxiety.)
But the real sense of fragility comes from the feeling that second-order grief
could hit me even harder than it usually does.
Second-order grief is listening to a sad song,
or seeing someone else grieve openly.
Maybe it&amp;rsquo;s that society trained me to respond to other people displaying grief
even as it trained me out of doing so myself,
or maybe it&amp;rsquo;s just that other people being unguarded with their emotions
can get through my defenses in a way that I can&amp;rsquo;t do myself.
The master&amp;rsquo;s tools can&amp;rsquo;t dismantle the master&amp;rsquo;s wall.&lt;/p&gt;

&lt;p&gt;When my father died suddenly, the first time I cried was over a week later,
when I saw my brother —
the one reknowned for his ability to hold an absolutely straight face
through any attempts to faze him —
break down.
On the other hand,
the song &amp;ldquo;Virtute the Cat Explains Her Departure,&amp;rdquo;
by the Weakerthans,
is one of the few things in this world that can &lt;a href=&#34;http://thevalrus.tumblr.com/post/17079159785/virtute-the-cat&#34;&gt;reliably bring me to tears&lt;/a&gt;.
I love it, and hate it, precisely because of its ability to make me let down my guard
in a way that it seems most other things can&amp;rsquo;t,
and despite my girlfriend&amp;rsquo;s asking me &amp;ldquo;Why do you do that to yourself?&amp;rdquo;
sometimes it just feels &lt;em&gt;right&lt;/em&gt; to cry,
the same way sometimes we intentionally do things that scare or hurt us in other ways.
But now, in my current state of fragility,
I&amp;rsquo;m afraid to listen to that song.
Maybe I don&amp;rsquo;t want to cry when there&amp;rsquo;s a chance that some part of it might be real,
that Einstein is sad and afraid and in pain and there&amp;rsquo;s nothing I can do about it.
Usually I can resist anthropomorphizing him this way.
But that song shatters my resistance in too many ways for me to risk it.&lt;/p&gt;

&lt;p&gt;Someday soon I will wake up and,
for the first time in nine years,
there will no longer be an Einstein.
I know this,
and I can face it and be mostly unmoved.
But if I listen to &lt;a href=&#34;https://www.youtube.com/watch?v=1bSdRizGYb0&#34;&gt;Woke Up New&lt;/a&gt;,
even though it is about a person and not a cat,
that &amp;ldquo;what do I do without you&amp;rdquo; will somehow make it real.
And I&amp;rsquo;ll have to really confront how maybe,
some cold winter morning after Einstein leaves,
it will be cold, so I&amp;rsquo;ll put on a sweater and turn up the heat,
and then, suddenly and without warning,
the walls will begin to close in,
and there will be absolutely nothing I can do about it.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Poison Season : Kaputt :: Trouble in Dreams : Destroyer&#39;s Rubies</title>
            <link rel="alternate" href="http://ian.mccowan.space/2015/09/25/Poison_Season/" type="text/html" />
            <id>http://ian.mccowan.space/2015/09/25/Poison_Season/</id>
            <updated>2015-09-25T03:41:00Z</updated>
            
            <summary type="html">I&amp;rsquo;ve mentioned the analogy in this post&amp;rsquo;s title to a couple hard-core Destroyer fans —
my brother, and my best friend I&amp;rsquo;ve never met in person &lt;a href=&#34;http://jeff.hume.ca&#34;&gt;Jeff Hume&lt;/a&gt; —
and both had an initial reaction that suggested nonplussedness or at least extreme puzzlement.
So here&amp;rsquo;s what I mean.</summary>
            <content type="html">&lt;p&gt;I&amp;rsquo;ve mentioned the analogy in this post&amp;rsquo;s title to a couple hard-core Destroyer fans —
my brother, and my best friend I&amp;rsquo;ve never met in person &lt;a href=&#34;http://jeff.hume.ca&#34;&gt;Jeff Hume&lt;/a&gt; —
and both had an initial reaction that suggested nonplussedness or at least extreme puzzlement.
So here&amp;rsquo;s what I mean.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t just mean that &lt;em&gt;Poison Season&lt;/em&gt; is the LP following &lt;em&gt;Kaputt&lt;/em&gt;,
but let&amp;rsquo;s start with that fact.
I mean that &lt;em&gt;Poison Season&lt;/em&gt; is both a recoiling from and an expansion on &lt;em&gt;Kaputt&lt;/em&gt;
in a similar way that &lt;em&gt;Trouble in Dreams&lt;/em&gt; was to &lt;em&gt;Destroyer&amp;rsquo;s Rubies&lt;/em&gt;.
I use the term &amp;ldquo;recoiling&amp;rdquo; because of an &lt;a href=&#34;http://pitchfork.com/features/interviews/9651-accidental-pop-a-conversation-with-destroyers-dan-bejar/&#34;&gt;interview Dan Bejar did with Pitchfork&lt;/a&gt;
where he expressed discomfort, or something, at having found himself playing large festivals
in the wake of &lt;em&gt;Kaputt&lt;/em&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I remember being at Coachella and thinking, “What the fuck am I doing here?” That&amp;rsquo;s just one obvious one. But I didn&amp;rsquo;t have to play Coachella. No one forced me. That was a choice and that&amp;rsquo;s me just dabbling in this certain careerist version of myself. It fucking exists! I don’t regret it, though, and I’m really proud of &lt;em&gt;Kaputt&lt;/em&gt;. But it became clear to me very quickly that there are a few places where I have no business being—and that I wasn&amp;rsquo;t going to be returning to those places again, whether out of my own volition or because I would not be invited back. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the same interview, you can (unsurprisingly) sense Bejar&amp;rsquo;s intent
to withdraw from the crowd-pleasing pop of &lt;em&gt;Kaputt&lt;/em&gt;
that ended up with him on the stage at Coachella in the first place.&lt;/p&gt;

&lt;p&gt;Though I don&amp;rsquo;t have nor intend to try to look up interview evidence supporting it,
I submit that this isn&amp;rsquo;t a new pattern.
Prior to &lt;em&gt;Kaputt&lt;/em&gt;,
the last time Bejar made a relatively straightforward and accessible rock record
and got approving press for it,
it was &lt;em&gt;Destroyer&amp;rsquo;s Rubies&lt;/em&gt;.
He followed that up with &lt;em&gt;Trouble in Dreams&lt;/em&gt;
which was possibly his most widely panned
(well, let&amp;rsquo;s say &lt;em&gt;least critically lauded&lt;/em&gt;; Destroyer is a band that critics tend to love)
album in a decade.
Perhaps its best competition for that dubious prize would be 2002&amp;rsquo;s &lt;em&gt;This Night&lt;/em&gt;,
which — insofar as any Destroyer album resembles another —
is also probably the one most like &lt;em&gt;Trouble in Dreams&lt;/em&gt;:
it&amp;rsquo;s guitar-heavy, a little glammy, a little shambolic,
a little longer and more indulgent than it maybe needs to be.
Of course, &lt;em&gt;This Night&lt;/em&gt; came a year after &lt;em&gt;Streethawk: A Seduction&lt;/em&gt;,
certainly the most consistent and highly regarded Destroyer album pre-&lt;em&gt;Rubies&lt;/em&gt;!
Keeping in mind that this post&amp;rsquo;s title&amp;rsquo;s analogy is a loose one,
it would work equally well expanded to include &lt;em&gt;This Night&lt;/em&gt; : &lt;em&gt;Streethawk&lt;/em&gt; too.&lt;/p&gt;

&lt;p&gt;Musically, Bejar alludes to &lt;em&gt;Poison Season&lt;/em&gt;&amp;rsquo;s having two main vibes,
which are pretty apparent when you give it a spin.
The straight-up 70s-ish pop rock of &amp;ldquo;Dream Lover&amp;rdquo; and &amp;ldquo;Times Square&amp;rdquo;
is superficially reminiscent of several other Destroyer albums,
and I&amp;rsquo;m pretty sure it actually re-uses a handful of riffs from &lt;em&gt;Trouble in Dreams&lt;/em&gt;.
There&amp;rsquo;s also the chamber pop using classical instruments
like you hear on the bookend/title tracks and in the first half of &amp;ldquo;Hell&amp;rdquo;.
If the Destroyer album that &lt;em&gt;Trouble in Dreams&lt;/em&gt; most resembles is &lt;em&gt;This Night&lt;/em&gt;,
what precedent does &lt;em&gt;Poison Season&lt;/em&gt;&amp;rsquo;s chamber pop have?
Die-hard fans will already know where I&amp;rsquo;m going with this:
&lt;em&gt;Your Blues&lt;/em&gt;, the MIDI-orchestrated
(and enjoyable but also quite outré and critic- and mainstream-befuddling)
follow-up to &lt;em&gt;This Night&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Critical consensus has largely come to the conclusion
that &lt;em&gt;Rubies&lt;/em&gt; and &lt;em&gt;Kaputt&lt;/em&gt; are Destroyer&amp;rsquo;s masterpieces to date,
and like &lt;em&gt;Trouble in Dreams&lt;/em&gt; before it, &lt;em&gt;Poison Season&lt;/em&gt; sounds like a transitional work
in the wake of one of those masterpieces:
lacking its cohesion and instead sort of straddling two worlds,
a little more uneven,
a little harder to pin down,
maybe a little harder to love,
or maybe a little harder to admire and a little easier to love because of it.
I don&amp;rsquo;t love &lt;em&gt;Poison Season&lt;/em&gt;
but I didn&amp;rsquo;t want another &lt;em&gt;Kaputt&lt;/em&gt;,
so I&amp;rsquo;m happy that it&amp;rsquo;s surprising and kind of murky and difficult.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t mean to say that
Bejar is starting to just tread old ground and repeat himself.
These newer albums are also evolutions on the old ones they superficially resemble,
and no one who&amp;rsquo;s listened to them more than a couple times would mistake
&lt;em&gt;Trouble in Dreams&lt;/em&gt; for &lt;em&gt;This Night&lt;/em&gt; or &lt;em&gt;Poison Season&lt;/em&gt; for &lt;em&gt;Your Blues&lt;/em&gt;.
Nor do I mean to say that Dan Bejar&amp;rsquo;s artistic direction
is informed only by his desire to avoid the glare of the spotlight:
he&amp;rsquo;s clearly doing what interests him.
Hell, he even said in an interview that &lt;em&gt;Poison Season&lt;/em&gt; is 
&amp;ldquo;what&amp;rsquo;s closest to [his] heart right now,&amp;rdquo;
which is kind of delightful and reassuring
coming from a man who in recent years
has been given to pronouncements like
&amp;ldquo;The English language seemed spent, despicable, not easily singable. It felt over for English; good for business transactions, but that&amp;rsquo;s about it,&amp;rdquo;
and &amp;ldquo;I think I also lost complete interest and faith in indie rock music being a serious forum for writing&amp;rdquo;
and (in his song &amp;ldquo;Grief Point&amp;rdquo;) &amp;ldquo;I have lost interest in music. It is horrible.&amp;rdquo;
From the standpoint of that last quote,
&lt;em&gt;Poison Season&lt;/em&gt; is a relief.
It&amp;rsquo;ll never be my favorite Destroyer album,
but it&amp;rsquo;s not something made by someone who&amp;rsquo;s lost interest in music,
and we should all be thankful for that.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Spacemacs</title>
            <link rel="alternate" href="http://ian.mccowan.space/2015/04/07/Spacemacs/" type="text/html" />
            <id>http://ian.mccowan.space/2015/04/07/Spacemacs/</id>
            <updated>2015-04-07T01:04:00Z</updated>
            
            
            <content type="html">&lt;h2&gt;A Vimmer&amp;rsquo;s Emacs Prerequisites&lt;/h2&gt;
&lt;p&gt;In a &lt;a href=&#34;http://ian.mccowan.space/2014/11/22/My_Own_Personal_Editor_War/index.html&#34;&gt;previous post&lt;/a&gt; I explained why Vim and Sublime Text ultimately disappointed me; in this one, I&amp;rsquo;m going to describe how I finally found at least temporary respite in Emacs and what it took to get me there.&lt;/p&gt;

&lt;p&gt;I had a rocky start with Emacs. Actually I had about four of them. There was never any question that I was going to use &lt;a href=&#34;http://www.emacswiki.org/Evil&#34;&gt;Evil-mode&lt;/a&gt;, Emacs&amp;rsquo;s vi emulation layer. I understand that it arose from the ashes of several previous such efforts to become one of the most complete vi emulations available for &lt;em&gt;any&lt;/em&gt; text editor besides ones that derive from vi itself.&lt;/p&gt;

&lt;p&gt;Coming from Sublime Text&amp;rsquo;s deeply inadequate or flawed vi emulation packages, Evil was a revelation. With very few exceptions, it really is just like using Vim. It&amp;rsquo;s all that other crap that Emacs does that I had to make sense of somehow and that tripped me up the first several times I made a serious attempt at learning it.&lt;/p&gt;

&lt;p&gt;One of the popular jokes about Emacs is that it stands for &amp;ldquo;Escape Meta Alt Control Shift&amp;rdquo;, a jab at the countless arcane key chords that you&amp;rsquo;re expected to use to invoke its mind-boggling array of features. Almost immediately, I decided that finding a way to avoid those chords in favor of using Vim-style key sequences mostly without modifiers would be a prerequisite for my using Emacs full time.&lt;/p&gt;

&lt;p&gt;To make this distinction a bit clearer: The key command to quit Emacs is &lt;code&gt;C-x C-c&lt;/code&gt;, which means &amp;ldquo;control-x followed by control-c&amp;rdquo;. Take a look at this &lt;a href=&#34;http://wttools.sourceforge.net/emacs-stuff/emacs-keybindings.html&#34;&gt;table of Emacs commands&lt;/a&gt; and you&amp;rsquo;ll get an idea why there&amp;rsquo;s a &lt;a href=&#34;http://en.wikipedia.org/wiki/Emacs#.22Emacs_pinky.22&#34;&gt;whole flavor of RSI&lt;/a&gt; named for Emacs and why I wanted to just swap those key bindings out from the get go. What I really wanted was to bulk-convert all of Emacs&amp;rsquo;s RSI-inducing chords to key sequences like ones using Vim&amp;rsquo;s leader keys: for example, the aforementioned &lt;code&gt;C-x C-c&lt;/code&gt; might become &lt;code&gt;\xc&lt;/code&gt; or something.&lt;/p&gt;

&lt;p&gt;My first pass at this had me using &lt;a href=&#34;https://github.com/chrisdone/god-mode/&#34;&gt;god-mode&lt;/a&gt; to take a bunch of the modifiers out of Emacs commands. But I had some trouble getting god-mode to play nice with Evil, even when I used the charmingly titled &lt;a href=&#34;https://github.com/gridaphobe/evil-god-state&#34;&gt;evil-god-state&lt;/a&gt; to tie the two together. I suspect that this was actually a perfectly viable way to achieve what I wanted and some misunderstanding on my part prevented me from getting it working; I was too new to Emacs and tried to deviate from its norms too much too fast. If you use evil-mode and god-mode together I&amp;rsquo;d be interested to hear how it works for you.&lt;/p&gt;

&lt;p&gt;By this point I&amp;rsquo;d dipped my toes into Emacs enough to have a handle on Emacs Lisp, the (far superior to Vimscript) language used to do all of Emacs&amp;rsquo;s extensive customization. I&amp;rsquo;d tried the &amp;ldquo;build up an Emacs config from scratch&amp;rdquo; thing a couple times and ended up frustrated with it due to its being a total crap shoot whether any given plugin would play nice with evil-mode. So when I came across a starter kit  whose tagline is &amp;ldquo;The best editor is neither Emacs nor Vim, it&amp;rsquo;s Emacs &lt;em&gt;and&lt;/em&gt; Vim!&amp;rdquo;, and which &lt;a href=&#34;https://github.com/syl20bnr/spacemacs/blob/master/doc/DOCUMENTATION.md#who-can-benefit-from-this-&#34;&gt;purports to be&lt;/a&gt; &amp;ldquo;first intended to be used by &lt;strong&gt;Vim users&lt;/strong&gt; who want to go to the next level by using Emacs&amp;rdquo;, I was 100% ready to jump feet-first into an unabashedly Evil-centric starter kit.&lt;/p&gt;
&lt;h2&gt;Spacemacs&lt;/h2&gt;
&lt;p&gt;Here&amp;rsquo;s the link to that starter kit, which is called &lt;a href=&#34;https://github.com/syl20bnr/spacemacs&#34;&gt;Spacemacs&lt;/a&gt;. It takes Vim&amp;rsquo;s leader key idea and kicks it into overdrive with the help of a &lt;a href=&#34;https://github.com/cofi/evil-leader&#34;&gt;plugin&lt;/a&gt; that provides the same functionality in Evil, setting the leader key to space (whence the starter kit&amp;rsquo;s name) and using it to replace a whole bunch of Emacs chords with modifier-free key sequences.&lt;/p&gt;

&lt;p&gt;This approach is pretty similar to the one I had in mind with evil-god-state, though it doesn&amp;rsquo;t automatically translate Emacs bindings like I&amp;rsquo;d hoped. But that turned out not to be as big a problem as I thought: Emacs does so much that I don&amp;rsquo;t really &lt;em&gt;want&lt;/em&gt; to have it all at my fingertips. Manually setting up my bindings helps me compartmentalize, adding a few at a time and assimilating them while I note what continues to be most frictionful so I can try to ameliorate it in my next round of bindings. And Spacemacs sets up a &lt;em&gt;ton&lt;/em&gt; of bindings for you, using a sort of &amp;ldquo;namespaced&amp;rdquo; hierarchy that allows all those bindings to avoid stepping on each other&amp;rsquo;s toes while also encouraging mnemonics and working well with a nice feature that aids discoverability.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s not the only way that Spacemacs is smartly designed. Its overall architecture is such that it&amp;rsquo;s (relatively) welcoming for the newbie but has a framework for sensible extensibility when you get further into it. I&amp;rsquo;ll explain some of the things that were most helpful to me in making Emacs with Spacemacs my full-time editor:&lt;/p&gt;
&lt;h3&gt;Getting Started with Spacemacs&lt;/h3&gt;
&lt;p&gt;Memorizing these bindings will enable you to get around in Spacemacs, if occasionally somewhat clumsily. They were my bread and butter before I started to do my own configuration. I&amp;rsquo;m only mentioning Emacs-specific bindings here; note that most of the basic functionality of Vim also works well in Spacemacs, like invoking Ex mode with &lt;code&gt;:&lt;/code&gt; and using it to do things like save and open files, split windows, etc.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;SPC&amp;gt; f f&lt;/code&gt;: Mnemonic &amp;ldquo;find file&amp;rdquo;. Triggers the function &lt;code&gt;ido-find-file&lt;/code&gt;, which lets you use &lt;a href=&#34;http://www.masteringemacs.org/article/introduction-to-ido-mode&#34;&gt;Ido&lt;/a&gt; to navigate your filesystem to find a file to open, starting from the directory of the current buffer. A crash course: &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; will autocomplete. Deleting when there&amp;rsquo;s no text after a slash will go up a directory. &lt;code&gt;~/&lt;/code&gt; will take you to your home directly from anywhere. &lt;code&gt;//&lt;/code&gt; will take you to your filesystem root from anywhere. &lt;code&gt;&amp;lt;Return&amp;gt;&lt;/code&gt; will go into the selected directory or open the selected file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;SPC&amp;gt; b s&lt;/code&gt;: Mnemonic &amp;ldquo;buffer switch&amp;rdquo;. Opens a &lt;a href=&#34;https://tuhdo.github.io/helm-intro.html&#34;&gt;Helm&lt;/a&gt; minibuffer with a list of all your open buffers as well as recently visited ones. The biggest thing to know about Helm is that &lt;code&gt;&amp;lt;Tab&amp;gt;&lt;/code&gt; doesn&amp;rsquo;t autocomplete. Instead, Helm filters the list as you type and you just select the best match using &lt;code&gt;&amp;lt;Return&amp;gt;&lt;/code&gt;. It does a great deal of more fancy stuff too, but for switching buffers, that will probably suffice.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;SPC&amp;gt; :&lt;/code&gt;: no mnemonic, but think of this as the Emacs equivalent of using &lt;code&gt;:&lt;/code&gt; to bring up the Ex command line in Vim. It brings up a Helm buffer that you can use to find an interactive Emacs function to run. There are about thirty million of these and I&amp;rsquo;m not going to really mention any here, but if you&amp;rsquo;re reading something about Emacs and you see some hyphen-separated name like &lt;code&gt;emacs-do-thing&lt;/code&gt; it&amp;rsquo;s probably a function you can call using &lt;code&gt;&amp;lt;SPC&amp;gt; :&lt;/code&gt;. If you&amp;rsquo;re already familiar with Emacs (or looking at non-Spacemacs-centric Emacs docs), this is the equivalent of the ubiquitous &lt;code&gt;M-x&lt;/code&gt; binding, but better because of Helm&amp;rsquo;s fuzzy matching.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;SPC&amp;gt; h d f&lt;/code&gt;: Mnemonic &amp;ldquo;help define function&amp;rdquo;. Man, so I complained about Vim and Sublime Text in my last post here. Sublime Text&amp;rsquo;s documentation is mediocre at best whereas Vim&amp;rsquo;s is very good and thorough, but even after working with Vim&amp;rsquo;s generally excellent documentation, Emacs&amp;rsquo;s is a revelation. There&amp;rsquo;s a reason that the blurb on the official Emacs web page describes it as &amp;ldquo;the extensible, customizable, &lt;em&gt;self-documenting&lt;/em&gt; real-time display editor.&amp;rdquo; Being able to use this binding, in conjunction with Helm for fuzzy matching, to quickly find any function defined anywhere in Emacs including custom ones, and get generally very useful information about how to use it&amp;hellip; it&amp;rsquo;s amazing how much of a difference it makes in learning how to use Emacs productively. Seriously, learn to love this binding. It even reports any custom bindings that are defined to invoke the function that you&amp;rsquo;re getting help on.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;SPC&amp;gt; h d k&lt;/code&gt;: Mnemonic &amp;ldquo;help define key&amp;rdquo;. Another example of Emacs&amp;rsquo;s excellent built-in help, this binding prompts for more keys and then tells you what they do. If you accidentally hit some key or something doesn&amp;rsquo;t do what you expect, this binding will tell you what it did. It&amp;rsquo;s slightly less useful than the previous binding in my experience, but still very useful.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;SPC&amp;gt;&lt;/code&gt;: As in, hit the space bar and then just wait. A feature (alluded to above) called &lt;a href=&#34;https://github.com/kai2nenobu/guide-key&#34;&gt;guide-key&lt;/a&gt; will kick in and list the keys you can use to continue issuing a command, with a short description of what each does. At first most of them will start with &amp;ldquo;group&amp;rdquo;; this is the &amp;ldquo;namespacing&amp;rdquo; I was referring to earlier. For example, the previous two bindings in this list are in the &amp;ldquo;help-describe&amp;rdquo; subgroup of the &amp;ldquo;helm/help/highlight&amp;rdquo; top-level group. This hierarchical organization of bindings makes it reasonably plausible that you can discover the binding for a task you want using guide-key alone.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Those bindings, along with Spacemacs&amp;rsquo;s &lt;a href=&#34;https://github.com/syl20bnr/spacemacs/blob/master/DOCUMENTATION.md&#34;&gt;very good documentation&lt;/a&gt; of its own, should be enough to get you started on getting used to the brave new world of Emacs: if you&amp;rsquo;re a Vim user already, you&amp;rsquo;re probably familiar with the process of starting with a small set of commands and gradually incorporating new ones into your workflow as you learn where your friction areas are. You&amp;rsquo;ll have to go through that again with Spacemacs, but having a huge chunk of Vim&amp;rsquo;s functionality already available makes the process a lot smoother. I know, for example, that there&amp;rsquo;s a Spacemacs binding for saving a buffer, but I don&amp;rsquo;t yet know what it is because I always just use the Vim-style &lt;code&gt;:w&lt;/code&gt; instead. &lt;/p&gt;

&lt;p&gt;Hopefully that&amp;rsquo;s enough for you to get started using Spacemacs! It&amp;rsquo;s a really nice piece of work and it seems to be deservedly catching on like wildfire, so if you&amp;rsquo;re familiar with Vim and anything I&amp;rsquo;ve said here sounds appealing, you should give it a try.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Pi Day Curmudgeonliness</title>
            <link rel="alternate" href="http://ian.mccowan.space/2015/03/14/Pi_Day_Curmudgeonliness/" type="text/html" />
            <id>http://ian.mccowan.space/2015/03/14/Pi_Day_Curmudgeonliness/</id>
            <updated>2015-03-14T04:49:00Z</updated>
            
            <summary type="html">Happy Arbitrary Number Of Convenient Yet Also Arbitrary Time Units Elapsed
Since The Death of a Historical Figure—
Whose Divinity, If You&amp;rsquo;re Reading This, You Probably Don&amp;rsquo;t Even Believe In—
Happening to Match Our Physiologically-Based (But Also Arbitrary)
Number System Representation Of
An Actually Fundamental Universal Constant
Day!</summary>
            <content type="html">&lt;p&gt;Happy Arbitrary Number Of Convenient Yet Also Arbitrary Time Units Elapsed
Since The Death of a Historical Figure—
Whose Divinity, If You&amp;rsquo;re Reading This, You Probably Don&amp;rsquo;t Even Believe In—
Happening to Match Our Physiologically-Based (But Also Arbitrary)
Number System Representation Of
An Actually Fundamental Universal Constant
Day!&lt;/p&gt;

&lt;p&gt;Once upon a time
I was enthusiastic about Pi Day,
but I&amp;rsquo;ve become a bit of a curmudgeon about it
without even realizing it.
Much of it is due to typical hipster nonsense, probably,
the &amp;ldquo;I was into math before you posers,&amp;rdquo; kind of thing
when I see like fifty pictures of pies pop up on my Facebook wall.
But my first paragraph sums up my more palatable reason,
which Vi Hart &lt;a href=&#34;https://www.youtube.com/watch?v=2E9m6yDEIj8&#34;&gt;expounds on at even more length&lt;/a&gt;
with somewhat more verve
but about as much use of the word &amp;ldquo;arbitrary&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;And I think that&amp;rsquo;s what my grumpiness about Pi Day comes down to:
for a day ostensibly about celebrating a mathematical constant
that&amp;rsquo;s remarkable for its timelessness and transcendence
(little &lt;a href=&#34;http://en.wikipedia.org/wiki/Transcendental_number&#34;&gt;math joke&lt;/a&gt; there)
of human conventions,
Pi Day sure is contingent on a lot of those conventions.
Pi, as the ratio of a circle&amp;rsquo;s diameter to its circumference,
cares not about what number system we use to express it,
or what year it is, or
(I&amp;rsquo;d claim, as a mathematical &lt;a href=&#34;http://en.wikipedia.org/wiki/Philosophy_of_mathematics#Platonism&#34;&gt;Platonist&lt;/a&gt;)
whether humans or any intelligent life even exist
to know about it and give it a name.
It&amp;rsquo;s just there, and it will always be there.
I don&amp;rsquo;t think I&amp;rsquo;m irreverent about Pi Day.
I think it&amp;rsquo;s my reverence for pi that makes me feel Pi Day &lt;em&gt;itself&lt;/em&gt; is irreverent.&lt;/p&gt;

&lt;p&gt;Still, though&amp;hellip;
it is nice to see the oft-maligned discipline of mathematics get a day in the sun,
however superficial I may find it.
And as a lapsed mathematician
it&amp;rsquo;s unbecoming for me to be too snooty about it.
So despite the arbitrariness of the day,
I wanted to blog about some of the paths that complaining about Pi Day led me down.
This will be very, very digressive and stream-of-consciousness.
But the point is that thinking about Pi Day,
despite its &lt;em&gt;blatant disrespect&lt;/em&gt; of Pi&amp;rsquo;s sublime universality,
can lead to some interesting
if only tangentially related
(another little &lt;a href=&#34;http://en.wikipedia.org/wiki/Tangent_lines_to_circles&#34;&gt;math joke&lt;/a&gt; there)
facts and curiousities.
And isn&amp;rsquo;t knowledge what Pi Day should rightly be about?&lt;/p&gt;
&lt;h3&gt;Arbitrary Time Units&lt;/h3&gt;
&lt;p&gt;I started thinking about the arbitrariness of Pi Day&amp;rsquo;s relation to the Judeo-Christian Gregorian calendar
and what more universal and unambiguous metrics it&amp;rsquo;s based on.
I don&amp;rsquo;t think there&amp;rsquo;s anything to be done about the
(to me as a non-Christian)
arbitrariness of Pi Day&amp;rsquo;s being relative to the date of the birth of Jesus Christ
(does this mean that Pi Day should be far more meaningful to Christians,
who attach a profound and universal significance to that date?),
but what about the divisions of time?&lt;/p&gt;

&lt;p&gt;Modern science,
which deals in &lt;a href=&#34;http://en.wikipedia.org/wiki/Higgs_boson&#34;&gt;particles that exist for far less than one-billionth of one billionth of one second&lt;/a&gt;,
would not be satisfied with the imprecision in the layperson&amp;rsquo;s definition of a second as
1/31,536,000 of the time it takes for the Earth to revolve around the sun
(or 1/86,400 of the time it takes for it to rotate once).
The difference between any such revolution and the next
is surely long enough for countless Higgs bosons to be created and destroyed.
But the second is a &lt;a href=&#34;http://en.wikipedia.org/wiki/SI_base_unit&#34;&gt;Système International base unit&lt;/a&gt;.
How is it measured these days
in a way that&amp;rsquo;s good enough for science on this level?&lt;/p&gt;

&lt;p&gt;The answer is quite arcane:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The second is the duration of 9 192 631 770 periods of the radiation corresponding to the transition between the two hyperfine levels of the ground state of the caesium 133 atom.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;but it&amp;rsquo;s interesting because of the lengths that people presumably had to go to
in order to ground what we&amp;rsquo;d &lt;em&gt;already defined as a second&lt;/em&gt;
in something that doesn&amp;rsquo;t change
every time a comet swings by and tugs something a bit.
And even decades after that definition was cooked up,
it had to be amended
to specify that it refers to the caesium atom &lt;em&gt;at a temperature of absolute zero&lt;/em&gt;,
because the radiation implied by a nonzero ambient temperature
can affect the above measurement.
In practice, this means no real-world clock can &lt;a href=&#34;http://en.wikipedia.org/wiki/Second#Modern_measurements&#34;&gt;measure a second&lt;/a&gt; directly
according to the strict definition.
They have to use whatever temperature they can hold stable
and extrapolate based on that
what the measurement would be at absolute zero.&lt;/p&gt;
&lt;h3&gt;How Universal Is Pi?&lt;/h3&gt;
&lt;p&gt;Looking at the contortions necessary
to make a &amp;ldquo;second&amp;rdquo; something that&amp;rsquo;s useful
for high-precision science
got me wondering whether
my understanding of pi is as &amp;ldquo;universal&amp;rdquo; as I reverently assume it is.
In particular, our value of 3.14 and so on
is based on a circle in &lt;em&gt;Euclidean&lt;/em&gt; geometry,
which is characterized by the &lt;a href=&#34;http://en.wikipedia.org/wiki/Playfair%27s_axiom&#34;&gt;axiom&lt;/a&gt;
that given a line &lt;em&gt;L&lt;/em&gt; and a point &lt;em&gt;P&lt;/em&gt; not on that line,
there is exactly one line through &lt;em&gt;P&lt;/em&gt; parallel to &lt;em&gt;L&lt;/em&gt;.
That seems obvious, 
but in fact you you can instead declare that &lt;a href=&#34;http://en.wikipedia.org/wiki/Spherical_geometry&#34;&gt;there are &lt;em&gt;no&lt;/em&gt; lines through &lt;em&gt;P&lt;/em&gt; that parallel &lt;em&gt;L&lt;/em&gt;&lt;/a&gt;
or that there are &lt;a href=&#34;http://en.wikipedia.org/wiki/Hyperbolic_geometry&#34;&gt;&lt;em&gt;infinitely many&lt;/em&gt; such lines&lt;/a&gt;
and get &lt;a href=&#34;http://en.wikipedia.org/wiki/Models_of_non-Euclidean_geometry&#34;&gt;perfectly coherent and even wildly useful systems&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you make the first of those two assumptions,
you get something called spherical geometry,
called that because things work as if they were all on a sphere.
In spherical geometry, the angles of a triangle add up to &lt;em&gt;more than&lt;/em&gt; 180 degrees
(or π radians, if you prefer)
and there&amp;rsquo;s no such thing as parallel lines;
&lt;em&gt;all&lt;/em&gt; lines intersect.
Circles on a sphere look much like they do in &amp;ldquo;flat&amp;rdquo; Euclidean geometry,
(although some circles in spherical geometry,
known as &amp;ldquo;great circles&amp;rdquo;,
are &lt;a href=&#34;http://en.wikipedia.org/wiki/Great_circle&#34;&gt;also lines&lt;/a&gt;)
but if you measure distance along the surface of the sphere,
their circumference-to-diameter ratio is &lt;em&gt;not&lt;/em&gt; what we know as π!
In fact that ratio is 2
for the great circles
and &lt;a href=&#34;http://blog.plover.com/math/pi.html&#34;&gt;gets closer to our π as the circles get smaller&lt;/a&gt;!
Under the second assumption,
in hyperbolic geometry,
instead &lt;a href=&#34;http://en.wikipedia.org/wiki/Hyperbolic_geometry#Circles_and_disks&#34;&gt;the ratio is &lt;em&gt;greater&lt;/em&gt; than our π&lt;/a&gt;
(though, again, it gets closer to π
as the circles get smaller
because both hyperbolic and spherical geometry
look like Euclidean geometry if you zoom in real close).&lt;/p&gt;

&lt;p&gt;So dang, I should reconsider my position on my high horse.
The only reason I think of pi as &amp;ldquo;universal&amp;rdquo;
is that I privilege Euclidean geometry
over the spherical and hyperbolic kind!
There&amp;rsquo;s no compelling &lt;em&gt;objective&lt;/em&gt; reason
that we should say pi
(defined as the ratio of a circle&amp;rsquo;s circumference to its diameter)
is approximately 3.14 at all;
instead all we can say is that that&amp;rsquo;s the case
&lt;em&gt;in Euclidean geometry&lt;/em&gt;.
Pure mathematics
views the three geometries I mention as derived from collections of axioms.
By itself, it &lt;a href=&#34;http://euler.slu.edu/escher/index.php/The_Three_Geometries&#34;&gt;doesn&amp;rsquo;t favor any of them over the others&lt;/a&gt;.
And why should &lt;em&gt;we&lt;/em&gt; even prefer Euclidean geometry
when we live on a sphere?&lt;sup id=&#34;ref1&#34;&gt;&lt;a href=&#34;#foot1&#34; class=&#34;ref&#34;&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3&gt;Privilege&lt;/h3&gt;
&lt;p&gt;Realizing that the mathematical constant that I revere
(so much that I smugly look down on those
who celebrate it in a way that I think undercuts its real value)
is actually contingent on a specific geometry
which we designate as &amp;ldquo;the standard&amp;rdquo; one
just because it&amp;rsquo;s most convenient to us
is a sort of mathematical &amp;ldquo;checking my privilege.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://geekfeminism.wikia.com/wiki/Privilege&#34;&gt;Checking your privilege&lt;/a&gt;
just means to acknowledge the biases
that arise from your personal experience and circumstances
(which may differ hugely from those of other people)
when you think about or discuss an issue.
It&amp;rsquo;s become a sort of shibboleth of the left wing
in American political discourse.
A lot of people think it&amp;rsquo;s primarily a way to shut down conversations
about the kinds of &amp;ldquo;hot button&amp;rdquo; topics where privilege is most relevant:
race, class, gender, religious belief, disabilities.
And indeed it can be used that way.
But I think it&amp;rsquo;s a valuable thing
to &lt;a href=&#34;http://blog.shrub.com/check-my-what/&#34;&gt;be aware of how your life experiences
have been shaped by cultural forces&lt;/a&gt;
and how those experiences
shape your beliefs and assumptions in turn.&lt;/p&gt;

&lt;p&gt;In the case of π,
what I thought was a universal and fundamental value
turned out only to be applicable to one specific set of axioms:
axioms which were
(not to put too fine a point on it)
&lt;a href=&#34;http://en.wikipedia.org/wiki/Euclidean_geometry#The_Elements&#34;&gt;laid out by a white man&lt;/a&gt;&lt;sup id=&#34;ref2&#34;&gt;&lt;a href=&#34;#foot2&#34; class=&#34;ref&#34;&gt;&lt;/a&gt;&lt;/sup&gt; in 300 BC.
Of course I am not proposing that,
had Euclid not been a white man,
we would have discovered non-Euclidean geometry
in less than the two millennia it actually took.
But what if instead of following the paths laid down by a mathematician
who did all his scratchwork on flat surfaces,
we&amp;rsquo;d had other geometrical prodigies
who used (cylindrical) tree trunks instead?&lt;/p&gt;

&lt;p&gt;I follow a lot of disputes about pop culture
and a common argument against adding &amp;ldquo;diverse&amp;rdquo; characters to media
is that there&amp;rsquo;s no reason to &amp;ldquo;change&amp;rdquo; it
or &amp;ldquo;try to make a statement.&amp;rdquo;
People who make such arguments assume,
based on privileges that they probably haven&amp;rsquo;t realized they enjoy,
that the straight white male is the &lt;em&gt;default&lt;/em&gt;
and that using characters who don&amp;rsquo;t fit that mold
is a conscious choice to deviate from that default.
But maybe some people don&amp;rsquo;t fit that demographic
and have different defaults.
Maybe, like with Euclidean, spherical and hyperbolic geometry,
there&amp;rsquo;s not really a good reason to prefer just one of them
and disciplines flourish when they stop pretending there is,
&lt;a href=&#34;http://en.wikipedia.org/wiki/Non-Euclidean_geometry#Discovery_of_non-Euclidean_geometry&#34;&gt;like geometry did at the beginning of the 19th century&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It seems like there are solid reasons to prefer Euclidean geometry,
but it&amp;rsquo;s what we&amp;rsquo;re taught in school,
and the mathematical canon looked at &lt;em&gt;everything&lt;/em&gt; through that lens
for almost two thousand years.
Maybe math would be further along right now
if we&amp;rsquo;d given those other geometries more credence
between 300 B.C. and 1800 A.D.
And maybe we&amp;rsquo;d make more progress faster even today
if we aggressively gave more voice to people
who don&amp;rsquo;t fit in with what people assume is the default.&lt;/p&gt;

&lt;hr id=&#34;facts_appendix&#34;/&gt;
&lt;h3&gt;Appendix: My Favorite Facts About π&lt;/h3&gt;
&lt;p&gt;Originally I omitted this section of this post,
but I decided to add it as a palate cleanser
and to demonstrate my solidarity with
what I concluded earlier was the noble purpose of Pi Day:
to spread the joy of mathematical knowledge.
(Although I think that spreading awareness of privilege
would be an even more noble purpose.)&lt;/p&gt;

&lt;p&gt;There are &lt;strike&gt;two and a half&lt;/strike&gt; one and a half facts about pi that leap to my mind
due to their surprisingness and elegance
whenever the subject of &amp;ldquo;how pi is interesting&amp;rdquo; comes up.
(One and a half because one of them is only sort of &amp;ldquo;about&amp;rdquo; pi,
down from two and a half because in writing this I learned that one isn&amp;rsquo;t actually true.)
Here they are:&lt;/p&gt;
&lt;h4&gt;The Basel Problem, a.k.a. the sum of the reciprocals of the squares of the natural numbers&lt;/h4&gt;
&lt;p&gt;Soooo one of those names doesn&amp;rsquo;t tell you anything about this problem
and the other is maybe a little dense to try to unpack, so
this is a maybe slightly more friendly version of it:
&lt;a href=&#34;http://en.wikipedia.org/wiki/Basel_problem&#34; title=&#34;Wikipedia page for The Basel problem.&#34;&gt;&lt;img title=&#34;The Basel Problem: what&#39;s the sum of the reciprocals of the squares of the natural numbers?&#34; src=&#34;http://ian.mccowan.space/assets/images/posts/Pi_Day/basel.png&#34; class=&#34;fullwidth&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;(Clicking that image will take you to the Wikipedia page for the problem,
which goes &lt;em&gt;way&lt;/em&gt; more in depth than I intend to here.)&lt;/p&gt;

&lt;p&gt;I love this fact because it&amp;rsquo;s easy to state precisely—
twelve English words is &lt;em&gt;far&lt;/em&gt; fewer than many interesting math problems take to state,
and the mathematical representation is tidier still—
but the result is extremely surprising
and ties into some math so deep
that I&amp;rsquo;d quickly be way over my head
if I attempted to do more than gloss over it here.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re not familiar with the notation,
you only need to worry about the stuff after the second equals.
The three things in between the equals signs all say the same thing.
If you&amp;rsquo;re not familiar with infinite sums,
they basically ask two questions:
&amp;ldquo;if you keep adding those fractions up,
will the sum eventually &amp;lsquo;even out&amp;rsquo; at a particular number?
If so, what number is that?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Here, the answer to the first question is &amp;ldquo;yes,&amp;rdquo;
and the answer to the second one is &amp;ldquo;π²/6&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Yes! You read that right.
If you keep adding up those fractions,
with the squares of the natural numbers in the denominators,
the sum will keep getting closer and closer to π²/6.
Where does the π come in
when we&amp;rsquo;re adding up these simple fractions?
Well, as you&amp;rsquo;ll see if you check that Wikipedia article,
the answer involves some pretty sophisticated mathematical machinery
and (you may have to take my word for this part)
a sizable dollop of cleverness as well.
Just to add up some
(ok, infinitely many)
simple fractions,
and get an answer that involves an irrational number!
The problem took 90 years to solve
after it was first posed
and another 6 to prove rigorously.
It&amp;rsquo;s beautiful and elegant,
one of my favorite mathematical facts.
And as a bonus,
it also relates to the function ζ,
a.k.a. the &lt;a href=&#34;http://en.wikipedia.org/wiki/Riemann_zeta_function&#34;&gt;Riemann Zeta Function&lt;/a&gt;:
one of the most important functions in mathematics,
with still more surprising implications
relating to the distribution of prime numbers,
one of math&amp;rsquo;s most enduring mysteries.&lt;/p&gt;
&lt;h4&gt;&lt;strike&gt;Average river sinuosity&lt;/strike&gt;&lt;/h4&gt;
&lt;p&gt;The sinuosity of a river is
the ratio of its length with all its twists and turns included
to its length &amp;ldquo;as the crow flies.&amp;rdquo;
Up until this very day,
I believed that the average sinuosity of the world&amp;rsquo;s rivers
was approximately equal to pi.&lt;/p&gt;

&lt;p&gt;But thanks to the Internet,
it&amp;rsquo;s not difficult to check this
and find that it&amp;rsquo;s &lt;a href=&#34;http://pimeariver.com&#34;&gt;almost certainly not true&lt;/a&gt;.
A gentleman who writes for the Guardian used the data
crowdsourced in that last link
to write a &lt;a href=&#34;http://www.theguardian.com/science/alexs-adventures-in-numberland/2015/mar/14/pi-day-2015-pi-rivers-truth-grime&#34;&gt;column&lt;/a&gt; about the debunking.
It turns out that the &amp;ldquo;fact&amp;rdquo; was based in part on a simulation,
not actual measurements of real-world rivers.
Perhaps in a more mathematically ideal world,
where rivers are free to go where they will
without being disrupted by weather or other large-scale geographic events,
it would actually be true.
But in this one,
it appears it&amp;rsquo;s actually not.&lt;/p&gt;
&lt;h4&gt;Euler&amp;rsquo;s identity&lt;/h4&gt;
&lt;p&gt;This is my &amp;ldquo;half a fact&amp;rdquo; about pi,
which &lt;em&gt;includes&lt;/em&gt; pi but isn&amp;rsquo;t really &lt;em&gt;about&lt;/em&gt; it,
but for my money it&amp;rsquo;s the most beautiful and elegant fact in mathematics.
Behold:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Euler&#39;s_identity&#34; title=&#34;Wikipedia page for Euler&#39;s identity.&#34;&gt;&lt;img title=&#34;Euler&#39;s identity, the most beautiful equation in mathematics.&#34; src=&#34;http://ian.mccowan.space/assets/images/posts/Pi_Day/euler.png&#34; class=&#34;fullwidth&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You don&amp;rsquo;t have to take my word for it.
The Wikipedia article linked from the picture above
has an entire section entitled &amp;ldquo;Mathematical beauty.&amp;rdquo;
Euler&amp;rsquo;s identity is even more elegant to state than the Basel problem,
and it ties together five of the most fundamental and important mathematical constants—
&lt;em&gt;e&lt;/em&gt;, &lt;em&gt;i&lt;/em&gt;, π, 0 and 1—
in a totally unexpected and concise way.
If there&amp;rsquo;s one thing that you as a (presumed) layperson can do
to understand why mathematicians so often refer to their discipline as &amp;ldquo;beautiful,&amp;rdquo;
it&amp;rsquo;s to learn about the different parts of Euler&amp;rsquo;s identity
and why it&amp;rsquo;s so remarkable that they fit together
in such a simple way.
&lt;em&gt;That&lt;/em&gt; would be an excellent way to celebrate Pi Day.&lt;/p&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li class=&#34;foot&#34; id=&#34;foot1&#34;&gt;
&lt;p&gt;Actually, I know the reason for this.
It&amp;rsquo;s the same reason that we use &lt;a href=&#34;http://en.wikipedia.org/wiki/Classical_mechanics&#34;&gt;Newtonian mechanics&lt;/a&gt;
for when you throw a ball
rather than relativity or quantum mechanics:
it&amp;rsquo;s a hell of a lot simpler and more familiar,
and for most of your purposes it&amp;rsquo;ll be more than good enough.&lt;/p&gt;

&lt;p&gt;Also, Euclidean geometry does the job on a spherical Earth
because, &lt;a href=&#34;http://en.wikipedia.org/wiki/Flat_Earth&#34;&gt;much to the detriment of many B.C. cultures&lt;/a&gt;,
a sphere is an awful lot like a flat plane
if you&amp;rsquo;re only looking at a tiny piece of it. &lt;a href=&#34;#ref1&#34;&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&#34;foot&#34; id=&#34;foot2&#34;&gt;Well, the Western canon certainly represents him as white. But then, it does the same for the middle-Eastern Jesus&amp;hellip; &lt;a href=&#34;#ref2&#34;&gt;↩&lt;/a&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        </entry>
    
        <entry>
            <title>My Own Personal Editor War</title>
            <link rel="alternate" href="http://ian.mccowan.space/2014/11/22/My_Own_Personal_Editor_War/" type="text/html" />
            <id>http://ian.mccowan.space/2014/11/22/My_Own_Personal_Editor_War/</id>
            <updated>2014-11-22T05:24:00Z</updated>
            
            <summary type="html">I&amp;rsquo;m a stickler for dev tools, in particular text editors, almost to a fault. Okay, definitely to a fault. Okay, probably well past the point where any reasonable person would call it a fault.</summary>
            <content type="html">&lt;p&gt;I&amp;rsquo;m a stickler for dev tools, in particular text editors, almost to a fault. Okay, definitely to a fault. Okay, probably well past the point where any reasonable person would call it a fault.&lt;/p&gt;

&lt;p&gt;For a long time after Vim opened my eyes to the power of a Real Text Editor and the fun and effortless feeling of modal editing, I tried to do as much code and longform writing as possible in it, or at least some editor with a decent emulation of its keybindings. But at some point in the last several years there&amp;rsquo;s been an explosion of good editors, many of which fit that latter criteria. So I took the opportunity to explore a few of them and try to find one that would do away with Vim&amp;rsquo;s shortcomings while still giving me that sweet, sweet modal editing that I so crave.&lt;/p&gt;
&lt;h2&gt;What&amp;rsquo;s Wrong With Vim?&lt;/h2&gt;
&lt;p&gt;Why did I want to move away from Vim? It&amp;rsquo;s the original modal editor (well, not counting vi) and it has a &lt;a href=&#34;http://vim.wikia.com/wiki/Vim_Tips_Wiki&#34;&gt;hugely&lt;/a&gt; &lt;a href=&#34;http://vimawesome.com&#34;&gt;robust&lt;/a&gt; &lt;a href=&#34;http://www.vim.org/scripts/&#34;&gt;ecosystem&lt;/a&gt; and userbase that makes the solution to almost any problem a Google search away.&lt;/p&gt;

&lt;p&gt;But it also has some limitations, baked in at a very low level, that grated on me more and more until I finally wanted to see if I could do better. Some of those limitations:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bluntly, Vim is Just a Text Editor and attempts to &lt;a href=&#34;http://unlogic.co.uk/2013/02/08/vim-as-a-python-ide/&#34;&gt;turn it into an IDE&lt;/a&gt; are doomed to kludginess at best and frustration and failure at worst as you tack on dozens of plugins in order to achieve what any IDE worth its salt would call basic functionality.&lt;/li&gt;
&lt;li&gt;Perhaps the situation in the above point would be okay if the dozens of plugins I alluded to had better cross-platform support. But due to circumstances beyond my control I have to use Windows at work, and time and time again while trying to set up a Vim plugin I&amp;rsquo;d see something to the effect of &amp;ldquo;Tested on OS X and Linux, seems to work on Windows, but YMMV&amp;rdquo; in its GitHub readme. Pile enough code with disclaimers like that on top of itself and it&amp;rsquo;s a recipe for disaster.&lt;/li&gt;
&lt;li&gt;I know, I know: it&amp;rsquo;s open source, fix it yourself, yadda yadda. But Vim plugins are mostly written in &lt;a href=&#34;http://stevelosh.com/blog/2011/09/writing-vim-plugins/#making-vimscript-palatable&#34;&gt;Vimscript&lt;/a&gt;, a wonky, frustrating, Vim-exclusive language that I really have no interest in learning.&lt;/li&gt;
&lt;li&gt;At some point in my investigation of other editors, I got addicted to having &lt;a href=&#34;http://www.pylint.org&#34;&gt;a linter&lt;/a&gt; running alongside my editing in realtime. Since I code mostly in Python at work, a linter can catch a lot of errors before I run anything, which can save me a lot of time. But the only way to get the kind of asynchronous/multi-threaded process support that you need for real-time linting in Vim is to use an &lt;a href=&#34;https://news.ycombinator.com/item?id=7057051&#34;&gt;experimental fork&lt;/a&gt; that will probably never be merged into Vim proper or some kind of other &lt;a href=&#34;http://www.vim.org/scripts/script.php?script_id=3307&#34;&gt;kludge&lt;/a&gt; which requires compiling an &amp;ldquo;external c helper application&amp;rdquo; and I bet works just &lt;em&gt;great&lt;/em&gt; on Windows.&lt;/li&gt;
&lt;li&gt;Related to that last point: Vim dates from 1991, and looks it. It&amp;rsquo;s based on vi, which is from the late 1970s and ran only in a terminal. Vim has a &amp;ldquo;GUI&amp;rdquo; mode, but it&amp;rsquo;s little more than a glorified terminal: its rendering is strictly grid-based; it supports only one font at a time; and any &amp;ldquo;graphics&amp;rdquo; that you can get in it are actually just text, so even many of the &lt;a href=&#34;https://raw.githubusercontent.com/kepbod/ivim/master/snapshot.jpg&#34;&gt;most attractive&lt;/a&gt; Vim setups have rough edges and a feeling of being dated.&lt;/li&gt;
&lt;li&gt;Like a lot of other people, I have my fingers crossed that &lt;a href=&#34;http://neovim.org&#34;&gt;Neovim&lt;/a&gt; will get off the ground, because I think it will solve a lot of these problems. But I want an editor I can use and enjoy &lt;em&gt;now&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The final nail in Vim&amp;rsquo;s coffin, as far as using it for heavier IDE-type coding, was trying out &lt;a href=&#34;http://www.sublimetext.com&#34;&gt;Sublime Text&lt;/a&gt; for a while.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Sublime&lt;/h2&gt;
&lt;p&gt;Sublime Text&amp;rsquo;s main advantages over Vim, for me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Its cross-platform support is better.&lt;/li&gt;
&lt;li&gt;Its IDE-esque capabilities are better. In particular, I don&amp;rsquo;t think I&amp;rsquo;ve ever found a project management system that I like as much as ST&amp;rsquo;s, and its Goto Anything feature is really slick.&lt;/li&gt;
&lt;li&gt;It starts up faster than a Vim that&amp;rsquo;s sufficiently tricked out to be equally capable.&lt;/li&gt;
&lt;li&gt;It strikes a good balance between &amp;ldquo;just a text editor&amp;rdquo; and &amp;ldquo;fucking &lt;a href=&#34;http://fbksoft.com/6-tips-to-make-eclipse-lighter-prettier-and-more-efficient/&#34;&gt;Eclipse&lt;/a&gt;&amp;rdquo;.&lt;/li&gt;
&lt;li&gt;It uses Python as an extension language.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s much prettier than Vim. This is something that I&amp;rsquo;ve been led to believe I shouldn&amp;rsquo;t care about as a Coder, but I&amp;rsquo;m also a lifelong Mac user, so I &lt;em&gt;do&lt;/em&gt; care. Sue me.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Like Vim, though, Sublime started to show cracks after a while. Unfortunately this happened after I already paid for it, but I got enough use out of it (and learned enough from it about what I will and won&amp;rsquo;t put up with in my tools) that I consider that money reasonably well spent. For the record, though, a list of my grievances:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The vi emulation plugin, &amp;ldquo;&lt;a href=&#34;https://www.sublimetext.com/docs/2/vintage.html&#34;&gt;Vintage mode&lt;/a&gt;,&amp;rdquo; seems decent at first glance but after sustained use turns out to be pretty &lt;a href=&#34;https://github.com/sublimehq/Vintage/issues&#34;&gt;deficient&lt;/a&gt;: many commands are missing or behave incorrectly, and the plugin has had very few updates to fix them in the last couple years. (More on this later.) There&amp;rsquo;s an &lt;a href=&#34;https://github.com/guillermooo/Vintageous&#34;&gt;alternative&lt;/a&gt; third-party plugin that&amp;rsquo;s more complete, but it still has a brace of bugs and shortcomings that are frustrating to anyone used to actual Vim, particularly in the area of defining new keybindings. Basically, the vi emulation situation in Sublime is spotty at best.&lt;/li&gt;
&lt;li&gt;The cross-platform situation is better than Vim, but there are still some patchy bits of the preferences system that made sharing prefs in Dropbox between my work Windows machine and my home Mac a chore. In particular: the User preferences, where you&amp;rsquo;re &lt;em&gt;supposed&lt;/em&gt; to make your personal configuration changes, are shared on all platforms, which is suboptimal. To get platform-specific settings, I had to configure them in a place I wasn&amp;rsquo;t supposed to, which of course caused problems elsewhere.&lt;/li&gt;
&lt;li&gt;The developer is almost completely incommunicado. Bugs and feature requests are slow to be addressed if they&amp;rsquo;re addressed at all.&lt;/li&gt;
&lt;li&gt;Relatedly, documentation is often outdated or incomplete and shows no signs of being updated, so a &lt;a href=&#34;http://docs.sublimetext.info/en/latest/index.html&#34;&gt;community documentation&lt;/a&gt; project has arisen to fill in the gaps. This and the previous point are pretty unacceptable for a paid product, in my opinion. &lt;a href=&#34;http://yfl.bahmanm.com/Members/ttmrichter/software-reviews/sublime-text-2-review&#34;&gt;This review&lt;/a&gt; concurs, a little more frothily than this blog post. (NB: at least some of the quotes in the &amp;ldquo;Stupid, stupid docs&amp;rdquo; section have been excised from the unofficial docs, but I can corroborate that they were once there. Hell, I even submitted a &lt;a href=&#34;https://github.com/guillermooo/sublime-undocs/pull/54&#34;&gt;pull request&lt;/a&gt; to remove the worst of them myself.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I probably could have lived with these problems. Sublime has the nice asynchronous linting I crave and just the right amount of IDE features, and I encounter few enough bugs in my routine ST usage that my last two complaints were mostly ideological rather than practical. But still. There&amp;rsquo;s got to be something better, right?&lt;/p&gt;

&lt;p&gt;Well, spoiler alert: after years as a Vim user hearing about how it&amp;rsquo;s a ridiculous nonsense program that&amp;rsquo;s too big for its britches, I&amp;rsquo;m currently using &lt;a href=&#34;http://www.gnu.org/software/emacs/&#34;&gt;Emacs&lt;/a&gt; and, on the whole, liking it more than I did Vim or ST when I got fed up with them. But because Emacs is not a text editor but a tiny universe, it took me four or five false starts before I finally found a way in that worked for me. I&amp;rsquo;ll describe it in a future post.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>My Best Bug Fix of the Year</title>
            <link rel="alternate" href="http://ian.mccowan.space/2014/11/08/Bug_Fix_of_the_Year/" type="text/html" />
            <id>http://ian.mccowan.space/2014/11/08/Bug_Fix_of_the_Year/</id>
            <updated>2014-11-08T23:39:00Z</updated>
            
            <summary type="html">&lt;em&gt;If you don&amp;rsquo;t know what UTF-16 surrogates are and how they work, consider &lt;a href=&#34;http://ian.mccowan.space/study/essays/unicode&#34;&gt;my Unicode essay&lt;/a&gt; required reading for this post.&lt;/em&gt;</summary>
            <content type="html">&lt;p&gt;&lt;em&gt;If you don&amp;rsquo;t know what UTF-16 surrogates are and how they work, consider &lt;a href=&#34;http://ian.mccowan.space/study/essays/unicode&#34;&gt;my Unicode essay&lt;/a&gt; required reading for this post.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is a story about the most confounding bug that I fixed at work this year.&lt;/p&gt;
&lt;h3&gt;Mangled Emoji&lt;/h3&gt;
&lt;p&gt;I had a problem with a &lt;a href=&#34;http://en.wikipedia.org/wiki/Visual_C%2B%2B&#34;&gt;Visual C++&lt;/a&gt; program at work: it was mangling some emoji characters that it wrote to a text file using the probably non-standard &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/yeby3zcb.aspx&#34;&gt;ccs flag&lt;/a&gt; (see the &amp;ldquo;Unicode Support&amp;rdquo; sub-section of that document) to encode them as UTF-16. The mangling happened like this example: instead of writing a 🎨, the program would write ��.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s not your browser failing to display two characters. That&amp;rsquo;s what I saw in the text file, and I thought the same thing as you might have just now: that my editor was failing to display characters because it didn&amp;rsquo;t have a font for them or something. But I opened that file up in a hex editor: those two characters were supposed to look like that, because they were both the Unicode &lt;a href=&#34;http://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character&#34;&gt;replacement character&lt;/a&gt;, code point U+FFFD. So it wasn&amp;rsquo;t that the text editor couldn&amp;rsquo;t display the output correctly. My C++ code was writing two replacement characters instead of an emoji for some reason.&lt;/p&gt;
&lt;h3&gt;Fruitless Debugging&lt;/h3&gt;
&lt;p&gt;I spent the better part of an afternoon trying fruitlessly to figure out why this was happening, going so far as to follow the debugger down into the depths of Microsoft&amp;rsquo;s file-handling C code where every variable and function is prefixed by between one and three underscores and all data processing happens on the byte level.&lt;/p&gt;

&lt;p&gt;(I am ordinarily a Python weenie, but this code was actually surprisingly easy to follow. Still, when you&amp;rsquo;re used to processing an entire file using one or two lines of code, it does all seem unbearably tedious.)&lt;/p&gt;

&lt;p&gt;Anyway, I was able to ascertain to the best of my understanding that at the time the emoji&amp;rsquo;s bytes were actually copied to the file pointer, those bytes were indeed &lt;code&gt;d8 3c df a8&lt;/code&gt;, the UTF-16 encoding of 🎨, with the first two bytes constituting a surrogate. Nevertheless, when I opened that file after letting the program finish, there were those ��s like a pair of malevolent  eyes, mocking me. Tormenting me.&lt;/p&gt;

&lt;p&gt;I called it a day and went home.&lt;/p&gt;
&lt;h3&gt;Sleeping on it&lt;/h3&gt;
&lt;p&gt;The next day I was able to look at the problem with fresh eyes. It&amp;rsquo;s a &lt;a href=&#34;http://www.manchester.ac.uk/discover/news/article/?id=10609&#34;&gt;commonly&lt;/a&gt; &lt;a href=&#34;http://www.theguardian.com/science/2005/oct/27/uk.research&#34;&gt;reiterated&lt;/a&gt;—but &lt;a href=&#34;http://www.telegraph.co.uk/science/science-news/8910111/Why-sleeping-on-a-problem-is-best.html&#34;&gt;scientifically&lt;/a&gt; &lt;a href=&#34;http://www.dailymail.co.uk/health/article-188135/Got-problem-Sleep-it.html&#34;&gt;defensible&lt;/a&gt;—&lt;a href=&#34;http://lifehacker.com/5953699/sleeping-on-difficult-problems-actually-helps-solve-them&#34;&gt;truism&lt;/a&gt;&lt;sup id=&#34;ref1&#34;&gt;&lt;a href=&#34;#foot1&#34; class=&#34;ref&#34;&gt;&lt;/a&gt;&lt;/sup&gt; that if you get stuck on a problem, one of the most helpful things to do is sleep on it. I believe this and I&amp;rsquo;ve experienced it myself several times, but I&amp;rsquo;m still always surprised when it works, and this time was no exception.&lt;/p&gt;

&lt;p&gt;Here is what my sleep-freshened eyes were able to see and synthesize the next day:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The problem happened &lt;em&gt;inconsistently&lt;/em&gt;, in that if an emoji appeared twice in an input file, one of them might turn into ��s in the output file but the other might not.&lt;/li&gt;
&lt;li&gt;But it also happened &lt;em&gt;reliably&lt;/em&gt;, in that I could reproduce it in the same place every time I ran the program with the same input.&lt;/li&gt;
&lt;li&gt;Even down in the murky depths of the C libraries, there was no point at which I saw anything corresponding to �� in any buffer in the debugger.&lt;/li&gt;
&lt;li&gt;The problem happened &lt;em&gt;only&lt;/em&gt; for the emoji in the output files. No other characters were affected.&lt;/li&gt;
&lt;li&gt;I mentioned this before, but to reiterate: the output file did actually contain the bytes corresponding to ��, and their appearing was not due to an issue with rendering or fonts.&lt;/li&gt;
&lt;li&gt;Perhaps the key insight I hadn&amp;rsquo;t had before: at no point during my debugging did I &lt;em&gt;actually see&lt;/em&gt; any code that would handle the encoding of the text (which was stored in arrays of 2-byte &lt;code&gt;wchar_t&lt;/code&gt;s in the code) to UTF-16 bytes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because of the last point in that list, it seemed like the problem &lt;em&gt;had&lt;/em&gt; to be in the UTF-16 encoding process that I wasn&amp;rsquo;t seeing, because it didn&amp;rsquo;t seem to be anywhere else. A problem with the encoding would certainly explain how the four bytes in the UTF-16 encoding of 🎨—two &lt;code&gt;wchar_t&lt;/code&gt;s&amp;#39; worth—could turn into two replacement characters used to indicate an incorrect encoding. If you were to split those bytes in half in some reason, you&amp;rsquo;d get &lt;code&gt;d8 3c&lt;/code&gt; and &lt;code&gt;df a8&lt;/code&gt;, neither of which are valid on their own in UTF-16 and would therefore get turned into replacement characters by an encoder.&lt;/p&gt;

&lt;p&gt;Putting this all together, I realized that the UTF-16 encoding must have been happening in an even murkier place than the ones I&amp;rsquo;d previously plumbed: when the emoji was flushed from a buffer onto the disk. This is common when writing to a file: when you send characters to a file handle, they&amp;rsquo;re actually sneakily just stored in memory until you have a big chunk of them that you can dump to the disk all at the same time and make that relatively slow disk IO worth the time it takes.&lt;/p&gt;

&lt;p&gt;If it just so happened that the C internals decided to flush my buffer in between the two &lt;code&gt;wchar_t&lt;/code&gt;s that constituted my emoji, they&amp;rsquo;d see a &lt;code&gt;d8 3c&lt;/code&gt; at the end of the first buffer and a &lt;code&gt;df a8&lt;/code&gt; at the beginning of the second one. The UTF-16 encoding process wouldn&amp;rsquo;t know what to do with either of them on their own, and by way of saying so, it&amp;rsquo;d turn both to replacement characters.&lt;/p&gt;

&lt;p&gt;As with many bugs that you work on consciously for six hours and subconsciously for another eight, the fix for this one took fewer than ten lines of code to manually flush the file buffer a little more often in order to ensure that it didn&amp;rsquo;t do so in the middle of a UTF-16 surrogate pair. It was kind of a lot of work to fix a very minor problem, but on the other hand, based on my fruitless Google searching to try to figure out what was going on here, I think I may have been the first one to find this bug in Microsoft&amp;rsquo;s UTF-16 handling, and that&amp;rsquo;s kind of exciting.&lt;/p&gt;

&lt;p&gt;Anyway, not with a bang but with a whimper does this post about my best bug fix of the year end. Sleep on your problems, folks. It works.&lt;/p&gt;

&lt;hr&gt;

&lt;ol&gt;
&lt;li class=&#34;foot&#34; id=&#34;foot1&#34;&gt;&lt;p&gt;This is the footiest footnote I think I&amp;rsquo;ve ever written in that it has nothing whatsoever to do with the main body of this post, but: when compiling these links from the front page of a Google search, the following did not escape my notice:
&lt;ul&gt;
&lt;li&gt;People in the UK seem to be &lt;em&gt;really&lt;/em&gt; fond of this idea; of the 5 links I used here, which constituted most of the aforementioned first page of search results, 4 are from UK websites; is &amp;ldquo;sleep on a problem&amp;rdquo; a British phrase?&lt;/li&gt;
&lt;li&gt;Also, 3 of the 5 articles I linked are accompanied by a stock photo of a conventionally attractive young white woman sleeping (it was 4 out of 5, but I replaced a Telegraph link with a Guardian one so I&amp;rsquo;d have 5 different sources)&lt;/li&gt;
&lt;li&gt;Of the two articles that &lt;em&gt;weren&amp;rsquo;t&lt;/em&gt; accompanied by photos of that description, one (the Guardian) was written by a woman, and the other (the Daily Mail) has a whole side bar of crass and exploitative articles about celebs showing off their beach bods or whatever. Sooo I guess what I&amp;rsquo;m saying is I&amp;rsquo;m not trying to draw any sweeping conclusions from these observations, they just amused me when I was looking up these articles. &lt;a href=&#34;#ref1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
        </entry>
    
        <entry>
            <title>Generating Level Maps for Tone Poem</title>
            <link rel="alternate" href="http://ian.mccowan.space/2014/07/11/Tone_Poem_Maps/" type="text/html" />
            <id>http://ian.mccowan.space/2014/07/11/Tone_Poem_Maps/</id>
            <updated>2014-07-11T01:10:00Z</updated>
            
            <summary type="html">Tone Poem needs to have areas to navigate. Because my primary inspiration for the overall game design is SNES-era console JRPGs, my first impulse was just to follow the lead of games like the venerable Final Fantasy VI. That game had a fair number of caves that looked something like this:</summary>
            <content type="html">&lt;p&gt;Tone Poem needs to have areas to navigate. Because my primary inspiration for the overall game design is SNES-era console JRPGs, my first impulse was just to follow the lead of games like the venerable Final Fantasy VI. That game had a fair number of caves that looked something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ian.mccowan.space/assets/images/posts/Tone_Poem_Maps/umaro-cave.png&#34; rel=&#34;bytebox&#34;&gt;&lt;img class=&#34;fullwidth&#34; src=&#34;http://ian.mccowan.space/assets/images/posts/Tone_Poem_Maps/umaro-cave.png&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But because it&amp;rsquo;s intended to be a game that teaches the player some real-world knowledge, it&amp;rsquo;s anticipated that the player may have to take multiple tries to get through Tone Poem&amp;rsquo;s areas. So I&amp;rsquo;d like to pinch the idea of procedural level generation from the &lt;a href=&#34;http://ian.mccowan.space/study/essays/roguelikes/index.html&#34;&gt;roguelike genre&lt;/a&gt; and apply it here, to prevent the player from having to slog through the exact same area several times.&lt;/p&gt;

&lt;p&gt;If you look again at the map linked above, there&amp;rsquo;s kind of a lot going on in it. Even ignoring the matter of how doors link up different areas, there are tiers connected only by stairs, bridges connecting an upper tier that can be walked under if you&amp;rsquo;re on a lower one, switches that have an effect on the layout, and chests placed so as not to block the narrow corridors. And then there are also the purely aesthetic elements like the lanterns and pipes across the ceilings.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s certainly possible to generate this kind of thing on the fly, but it seems finicky and not at all fun to me, and the finickiness would only increase as I added more flavorful aspects. Perhaps more importantly, though, the more I thought about it, the more I didn&amp;rsquo;t &lt;em&gt;want&lt;/em&gt; my levels to be like this. One of the least fun things about classic JRPGs is trudging interminably across terrain at a frustratingly slow pace, being interrupted every ten seconds between points A and B to fight annoying pissant dudes when you really just want to get on with it. I want to try to avoid as much of that as I can.&lt;/p&gt;

&lt;p&gt;So I want to take a completely different tack with my areas and base them on graphs, in the mathematical sense. &lt;img src=&#34;http://ian.mccowan.space/assets/images/posts/Tone_Poem_Maps/graph.png&#34; class=&#34;right&#34; /&gt; Actually, maybe it would be less ambiguous to say &amp;ldquo;in the computer science sense&amp;rdquo; or &amp;ldquo;in the discrete mathematical sense&amp;rdquo;, because I&amp;rsquo;m not talking about the kind of graphs with &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; axes that we all dealt with in math class. I mean the kind that are covered in some detail in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Graph_theory&#34;&gt;Wikipedia entry for &amp;ldquo;graph theory&amp;rdquo;&lt;/a&gt; and that are hugely important in things like search engines.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll try to give a sense of how I use graphs to generate maps, and what the advantages and disadvantages of them are, in a future post.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Music in Tone Poem</title>
            <link rel="alternate" href="http://ian.mccowan.space/2014/07/06/Music_in_Tone_Poem/" type="text/html" />
            <id>http://ian.mccowan.space/2014/07/06/Music_in_Tone_Poem/</id>
            <updated>2014-07-06T16:16:00Z</updated>
            
            <summary type="html">In &lt;a href=&#34;http://ian.mccowan.space/2014/02/20/MIDI_in_Python/index.html&#34;&gt;my last post about Tone Poem&lt;/a&gt; I was struggling with being able to use MIDI files as background music. The main problem was that &lt;a href=&#34;https://code.google.com/p/mingus/&#34;&gt;&lt;code&gt;mingus&lt;/code&gt;&lt;/a&gt;, the module I was using to read and represent MIDI, didn&amp;rsquo;t actually work very well for either of those things. Its MIDI file reading was &lt;a href=&#34;https://code.google.com/p/mingus/issues/detail?id=24&#34;&gt;so deficient it was effectively broken&lt;/a&gt;, and its model of a composition was too simple to represent even some pretty basic occurrences. In this post I&amp;rsquo;ll outline a couple more things I tried. Spoiler alert: the first one failed and the second seems to be working.</summary>
            <content type="html">&lt;p&gt;In &lt;a href=&#34;http://ian.mccowan.space/2014/02/20/MIDI_in_Python/index.html&#34;&gt;my last post about Tone Poem&lt;/a&gt; I was struggling with being able to use MIDI files as background music. The main problem was that &lt;a href=&#34;https://code.google.com/p/mingus/&#34;&gt;&lt;code&gt;mingus&lt;/code&gt;&lt;/a&gt;, the module I was using to read and represent MIDI, didn&amp;rsquo;t actually work very well for either of those things. Its MIDI file reading was &lt;a href=&#34;https://code.google.com/p/mingus/issues/detail?id=24&#34;&gt;so deficient it was effectively broken&lt;/a&gt;, and its model of a composition was too simple to represent even some pretty basic occurrences. In this post I&amp;rsquo;ll outline a couple more things I tried. Spoiler alert: the first one failed and the second seems to be working.&lt;/p&gt;
&lt;h2&gt;Independent MIDI Handling in a Separate Thread&lt;/h2&gt;
&lt;p&gt;The MIDI handler I ended up using, &lt;a href=&#34;https://github.com/olemb/mido/&#34;&gt;&lt;code&gt;mido&lt;/code&gt;&lt;/a&gt;, does basic decoding of the inscrutable stream of bytes that makes up a MIDI file. It converts them into &lt;code&gt;Message&lt;/code&gt; objects, easily inspectable representations of what the raw bytes actually mean.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;mido&lt;/code&gt; has a method, &lt;code&gt;play&lt;/code&gt;, that applies this conversion to the data in a MIDI file and sends each message in turn to a function of your choosing &lt;em&gt;at the time it would occur&lt;/em&gt; if you were listening to the MIDI file normally. Times in MIDI messages are specified in something called &amp;ldquo;ticks&amp;rdquo;, and converting those to real time involves some annoying calculation, but &lt;code&gt;mido&lt;/code&gt;&amp;rsquo;s &lt;code&gt;play&lt;/code&gt; method handles all that for you. To use it, all I had to do was start a second thread and run &lt;code&gt;play&lt;/code&gt; in it, supplying a little boring logic to turn &lt;code&gt;Messages&lt;/code&gt; into &lt;code&gt;pyfluidsynth&lt;/code&gt; calls.&lt;/p&gt;

&lt;p&gt;The trouble came when I tried to sync the thread playing the music with the one where the rest of the game&amp;rsquo;s logic happens. Beastie attacks, which were supposed to happen in time with the music, sounded off: worse, when I tried to make the music repeat, it did so too soon. In fact, though, I was correctly scheduling it to play every eight seconds. I&amp;rsquo;m pretty sure its sounding like it restarted too soon actually meant that it was playing too slow relative to Kivy&amp;rsquo;s scheduling clock.&lt;/p&gt;
&lt;h2&gt;Doing it Myself With Kivy&lt;/h2&gt;
&lt;p&gt;If, as it seemed, eight seconds was enough for my MIDI thread to get out of sync with Kivy, the only sure solution I could think of was to clamp the MIDI down more tightly to Kivy&amp;rsquo;s clock. Fortunately, I had a rough model for how to do that in &lt;code&gt;mido&lt;/code&gt;&amp;rsquo;s &lt;a href=&#34;https://github.com/olemb/mido/blob/master/mido/midifiles.py#L362&#34;&gt;&lt;code&gt;play&lt;/code&gt;&lt;/a&gt; method; unfortunately, because that method used &lt;code&gt;sleep&lt;/code&gt; to trigger messages at the right time, it effectively did its own scheduling so it wasn&amp;rsquo;t simple to substitute Kivy&amp;rsquo;s. I ended up doing two things I hate: copying code (&lt;code&gt;play&lt;/code&gt;), and using bits of &lt;code&gt;mido&lt;/code&gt; that were technically private code.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll spare you (any more of) the details, but suffice to say that making this work was probably the hardest thing I&amp;rsquo;ve yet had to do while making Tone Poem. MIDI timing is idiosyncratic and finicky and I had to do a bunch of things myself that I thought I&amp;rsquo;d brought &lt;code&gt;mido&lt;/code&gt; on to take care of. On the other hand, the end result:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;keeps MIDI background music in sync with the events in the main thread&lt;/li&gt;
&lt;li&gt;does everything using Kivy&amp;rsquo;s clock, keeping me from having to coordinate two different scheduling systems&lt;/li&gt;
&lt;li&gt;schedules MIDI events on the fly, which should allow me to manipulate them in realtime&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That last item means that I should be able to change the key or tempo of background music and have it take effect on the very next MIDI event, which may not be necessary but opens up a few interesting options in the future. It&amp;rsquo;s not a bad tradeoff for just over a hundred lines of somewhat gnarly code and a couple private API calls, and I&amp;rsquo;ll probably able to refactor that code to reduce some of the gnarliness. I&amp;rsquo;m cautiously happy about how it turned out.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>The Prescriptivist&#39;s Dodge</title>
            <link rel="alternate" href="http://ian.mccowan.space/2014/07/03/The_Prescriptivists_Dodge/" type="text/html" />
            <id>http://ian.mccowan.space/2014/07/03/The_Prescriptivists_Dodge/</id>
            <updated>2014-07-03T00:24:00Z</updated>
            
            <summary type="html">A work friend and I were talking about this unfortunate piece of ad copy on Apple&amp;rsquo;s &lt;a href=&#34;https://www.apple.com/ios/ios8/quicktype/&#34;&gt;iOS 8 QuickType web site&lt;/a&gt;.</summary>
            <content type="html">&lt;p&gt;A work friend and I were talking about this unfortunate piece of ad copy on Apple&amp;rsquo;s &lt;a href=&#34;https://www.apple.com/ios/ios8/quicktype/&#34;&gt;iOS 8 QuickType web site&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;iOS 8 predicts what you’ll likely say next.
No matter whom you’re saying it to.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We work in the linguistics group at our company, and among most linguists, &lt;em&gt;prescriptivism&lt;/em&gt; is considered kind of a shabby way to look at language. Prescriptivism is basically the stance that one particular way of speaking or writing should be favored over others, and while we can all enjoy a good-natured chortle at &lt;a href=&#34;https://www.youtube.com/watch?v=6uQ_extNBDA&#34;&gt;Weird Al &amp;ldquo;fixing&amp;rdquo; a sign in a grocery store&lt;/a&gt;, or the &lt;a href=&#34;http://www.unnecessaryquotes.com/&#34;&gt;Unnecessary Quotes Blog&lt;/a&gt;, it&amp;rsquo;s both willfully blind to the mutability of language and sometimes very limiting to insist that everything needs to be grammatically &amp;ldquo;correct&amp;rdquo; all the time. &amp;ldquo;Whom&amp;rdquo; is technically correct here, but it sounds awkward and stilted for a company that likes to keep its products and advertisements approachable and down-to-earth. Using &amp;ldquo;who&amp;rdquo; instead might lose Apple points with prescriptivists, but I&amp;rsquo;d argue that it accomplishes their other goals much more effectively.&lt;/p&gt;

&lt;p&gt;But then take this other example, also from the Apple page:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Supported languages include English optimized for the U.S., UK, Canada and Australia; French; German; Italian; Portuguese optimized for Brazil; Spanish; and Thai. &lt;strong&gt;And,&lt;/strong&gt; Simplified Chinese, Traditional Chinese and Japanese Kanji input also continue to feature predictive input.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Despite our best efforts not to wield prescriptivism against every text we see, my co-worker and I thought that &amp;ldquo;And,&amp;rdquo; at the beginning of a sentence was clunky. (Note that there is a prescriptivist injunction against starting a sentence with a conjunction like &amp;ldquo;and&amp;rdquo; or &amp;ldquo;although,&amp;rdquo; but we actually only object to the comma.) Is there a rule against starting a sentence with &amp;ldquo;and&amp;rdquo; followed by a comma? I don&amp;rsquo;t know, actually. But I still think it reads badly.&lt;/p&gt;

&lt;p&gt;This leads me to the &lt;em&gt;prescriptivist&amp;rsquo;s dodge&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://ian.mccowan.space/assets/images/posts/The_Prescriptivists_Dodge/prescriptivist-doge.jpeg&#34; rel=&#34;bytebox&#34;&gt;&lt;img class=&#34;fullwidth&#34; src=&#34;http://ian.mccowan.space/assets/images/posts/The_Prescriptivists_Dodge/prescriptivist-doge.jpeg&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wait, no, I&amp;rsquo;m sorry. That&amp;rsquo;s the prescriptivist&amp;rsquo;s &lt;em&gt;doge.&lt;/em&gt; The prescriptivist&amp;rsquo;s &lt;em&gt;dodge&lt;/em&gt; is objecting to language that &lt;em&gt;happens&lt;/em&gt; to be against some prescriptive norm, but not &lt;em&gt;because&lt;/em&gt; it breaks that norm. No, the non-prescriptivist would never be so rigid and dogmatic! S/he objects only because this particular transgression—I&amp;rsquo;m sorry, I mean &amp;ldquo;choice&amp;rdquo;&amp;zwnj;—&lt;em&gt;sounds bad&lt;/em&gt;. Just adhering to the admittedly arbitrary and archaic rules would, coincidentally, in this one particular case, result in something that sounds better.&lt;/p&gt;

&lt;p&gt;Of course, &amp;ldquo;better&amp;rdquo; is subjective, and a lifetime of being taught that &amp;ldquo;correct&amp;rdquo; grammar is super important and seeing &amp;ldquo;incorrect&amp;rdquo; grammar and minority dialects associated with ignorance and stupidity will tend to affect your opinion of what sounds &amp;ldquo;better&amp;rdquo; without your having much say in the matter. But the prescriptivist&amp;rsquo;s dodge lets you continue to enforce fundamentally arbitrary norms without being one of &lt;em&gt;those assholes&lt;/em&gt; who comments on Facebook posts being all &amp;ldquo;I believe you meant &amp;lsquo;its&amp;rsquo;!&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;oh my god this page&amp;rsquo;s URL is &lt;strong&gt;totally&lt;/strong&gt; missing an apostrophe&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>MIDI in Python</title>
            <link rel="alternate" href="http://ian.mccowan.space/2014/02/20/MIDI_in_Python/" type="text/html" />
            <id>http://ian.mccowan.space/2014/02/20/MIDI_in_Python/</id>
            <updated>2014-02-20T03:17:00Z</updated>
            
            <summary type="html">&lt;a href=&#34;python.org&#34;&gt;Python&lt;/a&gt; prides itself on having &amp;ldquo;batteries included&amp;rdquo;, which means it comes with a bunch of well-tested modules that can handle most use cases for a wide variety of common tasks. Some examples:</summary>
            <content type="html">&lt;p&gt;&lt;a href=&#34;python.org&#34;&gt;Python&lt;/a&gt; prides itself on having &amp;ldquo;batteries included&amp;rdquo;, which means it comes with a bunch of well-tested modules that can handle most use cases for a wide variety of common tasks. Some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.python.org/dev/library/argparse.html&#34;&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt;, for command-line option and argument handling&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.python.org/dev/library/xml.etree.elementtree.html&#34;&gt;&lt;code&gt;elementtree&lt;/code&gt;&lt;/a&gt;, for XML parsing and generation&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.python.org/dev/library/urllib.request.html&#34;&gt;&lt;code&gt;urllib2&lt;/code&gt;&lt;/a&gt;, for fetching data from the Web (and elsewhere)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All these helpful and robust modules can spoil programmers and leave them stymied when they run up against a task which isn&amp;rsquo;t well-supported by the standard library. I bumped into this when I tried to use Python to handle some MIDI.&lt;/p&gt;

&lt;p&gt;Briefly, MIDI is a standard format for transmitting musical data. It&amp;rsquo;s been around for I think two or three decades, but it&amp;rsquo;s still sufficiently esoteric and its uses rare enough that it was never added to Python&amp;rsquo;s standard library. As a result, it occupies a kind of tool netherworld: trying to find Python code that handles all the things you can do with MIDI led me into a funhouse with &amp;ldquo;Unmaintained since 2006&amp;rdquo; or &amp;ldquo;Not well-tested&amp;rdquo; or &amp;ldquo;Does most of what I need, but&amp;rdquo; scrawled on every dead-end and shadowy corridor.&lt;/p&gt;

&lt;p&gt;After a quick survey of the existing tools, I settled on working with two of them to do mutually exclusive MIDI-related tasks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/python-rtmidi&#34;&gt;&lt;code&gt;rtmidi&lt;/code&gt;&lt;/a&gt; to handle reading data from a MIDI keyboard in realtime. The version number was worrisome, but it seemed like a simple enough task.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/mingus&#34;&gt;&lt;code&gt;mingus&lt;/code&gt;&lt;/a&gt; to handle the transformation of MIDI files into musical data structures that can be manipulated using music theory. Again, ominous version number, but it seemed to be fairly robust and actually had unit tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This went well until I put together a brief track in Logic Pro and exported it to MIDI; mingus, on trying to read the resulting .mid file, failed with a complaint about a chunk of MIDI data that it couldn&amp;rsquo;t handle. I did some research into the &lt;a href=&#34;http://www.sonicspot.com/guide/midifiles.html&#34;&gt;MIDI file format&lt;/a&gt;, looked at mingus&amp;rsquo;s source code, and determined that while it was possible that there were events in my file that mingus couldn&amp;rsquo;t handle, the one it actually complained about wasn&amp;rsquo;t even present. Unfortunately, it seemed that mingus&amp;rsquo;s unit tests did not have great coverage in the area of MIDI file importing. I did not want to try to fix it myself.&lt;/p&gt;

&lt;p&gt;I went out in search of a finer-grained tool. Mingus&amp;rsquo;s main job, it seems to me, is doing music theory; MIDI handling is ancillary and it shouldn&amp;rsquo;t have surprised me much that it was poorly tested. I found another library, mido, which handles MIDI without all the music theory, and tried to use it to read my problematic .mid file and pipe the messages into Mingus. I was able to get a &amp;ldquo;composition&amp;rdquo; in Mingus this way, but the note durations were screwy. I realized that Mingus&amp;rsquo;s representation of music data, as a purely linear series of &amp;ldquo;note containers&amp;rdquo;, was not really sufficient to represent an arbitrary piece of MIDI music. Even something as simple as having a note sound while the previous one is still ringing is not, as far as I can tell, representable by a Mingus data structure.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m reconsidering my choices now. What I absolutely need out of MIDI handling code is the ability to detect and handle basic (note data only) input from a MIDI keyboard, but it actually occurs to me that most other tasks are just nice to have. If I have a soundtrack in MIDI format, I don&amp;rsquo;t need to be able to read it into a data structure that can recognize and manipulate its music-theoretical properties. I really just need to be able to play it. Basic transposition or tempo changes are things I&amp;rsquo;d like to have the option of doing (and they would be much more difficult with audio data than with MIDI), but they don&amp;rsquo;t require sophisticated insight into the data. So I think perhaps I need to consider instead a configuration like this one:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/mido&#34;&gt;&lt;code&gt;mido&lt;/code&gt;&lt;/a&gt; for handling all MIDI, be it realtime or file-based. It has a promising version number, for what that&amp;rsquo;s worth, and has been worked on recently enough that there&amp;rsquo;s some hope of getting help if I run into trouble with it. I think I can use it to replace rtmidi as well.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mingus&lt;/code&gt; for any music-theoretical shenanigans I want to do. Its MIDI handling seems like an afterthought now that I&amp;rsquo;ve checked it out, and so I&amp;rsquo;ll probably ignore it completely.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pypi.python.org/pypi/pyFluidSynth&#34;&gt;&lt;code&gt;pyfluidsynth&lt;/code&gt;&lt;/a&gt; for playing MIDI sound. I think it&amp;rsquo;s included in mingus and it should be safe to use from there. I don&amp;rsquo;t know how robust it is but I&amp;rsquo;m pretty sure it&amp;rsquo;s just a thin wrapper around the quite old and well-tested fluidsynth.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Needless to say, this has all been kind of frustrating, but I think it&amp;rsquo;s also worth it for forcing me to think a little more precisely what I need to be able to do.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>2013 Music&#39;s Best Lines</title>
            <link rel="alternate" href="http://ian.mccowan.space/2014/01/14/Best_Lines_2013/" type="text/html" />
            <id>http://ian.mccowan.space/2014/01/14/Best_Lines_2013/</id>
            <updated>2014-01-14T04:59:00Z</updated>
            
            
            <content type="html">&lt;dl&gt;
&lt;dt&gt;&amp;ldquo;Q: Do you fall so short of all that&amp;rsquo;s in your heart / When your friends, who you should pull up, you instead pick apart? / Do you watch the world get cold and crushed and small / And when you could do so much, you do fuck all?&amp;rdquo; –Okkervil River, &amp;ldquo;All The Time Every Day&amp;rdquo;&lt;/dt&gt;
&lt;dd&gt;The &amp;ldquo;Q&amp;rdquo; is in the lyric, yes (though not sung): this song is a questionnaire; this verse a question and, though a painful one, not an accusation; the answer is the chorus is the song&amp;rsquo;s title, repeated in various permutations in defiance, in the hope of exculpation, in anticipation of the final verse and its revelation that the singer/interrogator, too, has the same answer and that we should not be ashamed,  but neither absolved. All we can do, perhaps, is what the singer does: try, but try we must, all the time, and every day.&lt;/dd&gt;

&lt;dt&gt;&amp;ldquo;Outside of the influential arms of your idolatries / The object will be turning goodbyes into good biology&amp;rdquo; –The Uncluded, &amp;ldquo;Organs&amp;rdquo;&lt;/dt&gt;
&lt;dd&gt;In a song which flips between tender emotion and ruthless pragmatism, between borderline PSA and animal mysticism, with as much charming awkwardness as it does Kimya Dawson&amp;rsquo;s childish verses and Aesop Rock&amp;rsquo;s gravelly verbosity, Aes delivers a couplet that concisely demonstrates the appeal of the whole Uncluded project. The strangely touching but still goofy play on words &amp;ldquo;goodbyes/good biology&amp;rdquo; is the icing on the cake.&lt;/dd&gt;

&lt;dt&gt;&amp;ldquo;This is born alone, die alone / So my dialog&amp;rsquo;s dastardly / Life&amp;rsquo;s a tragedy generator operating at max capacity&amp;rdquo; (El-P); &amp;ldquo;My pugnacious rhyme patterns prove pit bull in my pedigree / And dogs fight to the death. You say you better? You better be!&amp;rdquo; (Killer Mike), –Run the Jewels, &amp;ldquo;Twin Hype Back&amp;rdquo;&lt;/dt&gt;
&lt;dd&gt;It didn&amp;rsquo;t seem right to have a line from just one of these two here, so I picked a couple that illustrate the dichotomy making Run the Jewels so compelling. The main mode in which both of these two operate at pretty much all times is aggression, of course: most any thirty second slice of this album or either of their recent solo albums is sufficient to demonstrate that. El-P&amp;rsquo;s is born out of nihilism; Killer Mike&amp;rsquo;s out of arrogance or, sometimes, righteousness. El-P &amp;ldquo;never met a word [he] wouldn&amp;rsquo;t, like a weapon, just brandish&amp;rdquo;, and here they unroll out of him like a lash of barbed wire. Killer Mike, meanwhile, wields his like blunt instruments; I don&amp;rsquo;t even generally like alliteration but here he makes it work for me.&lt;/dd&gt;

&lt;dt&gt;&amp;ldquo;I&amp;rsquo;m a tired arachnid spinning loose in my threads, building lifetimes of gossamer beds / And the filigree water drops around my head, they absorb every word that I said / There are no wings hitched to my spine, just an undying urge to climb / And I&amp;rsquo;ll wait for my mother, supposing she&amp;rsquo;d bother to hold me and keep me awhile&amp;rdquo; –Laura Stevenson, &amp;ldquo;L-DOPA&amp;rdquo;&lt;/dt&gt;
&lt;dd&gt;L-DOPA, &lt;a href=&#34;http://en.wikipedia.org/wiki/L-DOPA&#34;&gt;according to Wikipedia&lt;/a&gt;, is a chemical used to increase dopamine concentrations in the brain. The song seems to focus on Laura Stevenson&amp;rsquo;s somewhat fraught and distant relationship with her mother, but it also contains some of the most poignant and beautiful metaphors in any song I heard this year. This is the third of three of those metaphors and my favorite by a very thin margin. I have nothing to say by way of unpacking its meaning. I just think it is some of the most beautiful lyricism of 2013.&lt;/dd&gt;

&lt;dt&gt;&amp;ldquo;They be shooting whether it&amp;rsquo;s dark or not / I mean the days is pretty dark a lot / Round here it&amp;rsquo;s easier to find a gun than it is to find a fucking parking spot&amp;rdquo; –Chance the Rapper, &amp;ldquo;Paranoia&amp;rdquo;&lt;/dt&gt;
&lt;dd&gt;In an extremely obvious &amp;ldquo;secret&amp;rdquo; track after the freewheeling &amp;ldquo;Pusha Man&amp;rdquo; (who puts a secret song after the second track on an album?), Chance the Rapper brings some old-school Kanye-style frustration with the violence in his home city of Chicago. He&amp;rsquo;s practically gritting his teeth in this line, conflating his fear of that violence with a frustration that even bougeois-ass white people like myself can relate to, in a way that&amp;rsquo;s both funny and not.&lt;/dd&gt;

&lt;dt&gt;&amp;ldquo;The paramedic thinks I&amp;rsquo;m clever &amp;lsquo;cause I play guitar / I think she&amp;rsquo;s clever &#39;cause she stops people dying&amp;rdquo; –Courtney Barnett, &amp;ldquo;Avant Gardener&amp;rdquo;&lt;/dt&gt;
&lt;dd&gt; This line is the best from among several good ones on Barnett&amp;rsquo;s pre-debut &lt;em&gt;Double EP: A Sea of Split Peas.&lt;/em&gt; I don&amp;rsquo;t think it needs a lot of explication. It&amp;rsquo;s just a great line.&lt;/dd&gt;

&lt;dt&gt;&amp;ldquo;Pockets stay on swole, peep the motherfucking cash flow / Niggas pay my loans just to finger fuck my asshole&amp;rdquo; –Cakes Da Killa, &amp;ldquo;Get Right (Get Wet)&amp;rdquo;&lt;/dt&gt;
&lt;dd&gt;Cakes Da Killa&amp;rsquo;s &lt;em&gt;The Eulogy&lt;/em&gt; starts with a minute or so of pitched up &lt;em&gt;MacArthur Park&lt;/em&gt; and then this line, and it sets the tone for the whole album in terms of campy audacity and graphic sexual forthrightness. It&amp;rsquo;s almost sure to induce a double take on your first listen and serves as a sort of &amp;ldquo;Abandon all homophobia, ye who enter here&amp;rdquo; warning.&lt;/dd&gt;

&lt;dt&gt;&amp;ldquo;What&amp;rsquo;s that in your gun holster? / Oh, this? It&amp;rsquo;s the de-negritizer / I shoot myself with it until I&amp;rsquo;m whiter than Peter Piper / Now I&amp;rsquo;ll be able to bow before a world leader&amp;rsquo;s miter / And tell them the shackles on my Adidas sneakers need to be tighter&amp;rdquo; –Busdriver, feature on Milo&amp;rsquo;s &amp;ldquo;The Gus Haynes Cribbage League&amp;rdquo;&lt;/dt&gt;
&lt;dd&gt;This is the line that made me sit up straight and pay attention to Busdriver. As with most rap lines, a significant portion of its appeal is in the delivery, and Driver&amp;rsquo;s captures the exact blend of insouciance, cynicism and sarcasm that I feel this one demands. Plus the internal rhymes and callback to the hook&amp;rsquo;s &lt;a href=&#34;http://www.cnn.com/2012/06/18/us/adidas-shackle-shoes/&#34;&gt;Adidas shackle sneaker reference&lt;/a&gt; are sick. Sick enough that I don&amp;rsquo;t care that I&amp;rsquo;m not 100% sure what the man&amp;rsquo;s getting at; do white people have to kowtow to world leaders more than black people do? Really? That seems pretty equal-opportunity to me. Anyway, these two bars rule and Busdriver is my favorite rapper of 2013.&lt;/dd&gt;
&lt;/dl&gt;
</content>
        </entry>
    
        <entry>
            <title>Thoughts on &lt;i&gt;Yeezus&lt;/i&gt;</title>
            <link rel="alternate" href="http://ian.mccowan.space/2013/12/14/Yeezus/" type="text/html" />
            <id>http://ian.mccowan.space/2013/12/14/Yeezus/</id>
            <updated>2013-12-14T03:35:00Z</updated>
            
            <summary type="html">&lt;em&gt;Yeezus&lt;/em&gt; makes me uncomfortable. I don&amp;rsquo;t doubt that this is a large part of the reaction Kanye West is trying to provoke. &lt;em&gt;Yeezus&lt;/em&gt; is uncomfortable music: all sawblade synths, queasy riffs, samples appearing from nowhere and disappearing just as abruptly. But shit, I fuck with Death Grips and Clipping too. The industrial techno glitch crunk grime beats or whatever are novel for Yeezy and well suited to the aggression he brings to his raps here, but they don&amp;rsquo;t make me uncomfortable. What makes me uncomfortable is &lt;em&gt;Yeezus&lt;/em&gt;&amp;rsquo;s lack of apparent sense of humor or even self-awareness as Kanye West flings that aggression outwards in all directions. Nowhere is this more jarring or nauseating than when, in &amp;ldquo;&lt;a href=&#34;http://www.youtube.com/watch?v=D0QcxWPB59o&#34;&gt;Blood on the Leaves&lt;/a&gt;&amp;rdquo;, Kanye repurposes &amp;ldquo;Strange Fruit&amp;rdquo;, a song about lynchings, into yet another screed against women using marriage (or, as he terms it, &amp;ldquo;unholy matrimony&amp;rdquo;) to soak men for their money. It&amp;rsquo;s &amp;ldquo;Gold Digger&amp;rdquo; again, except with all the winking and jokes replaced by, in case I haven&amp;rsquo;t made it clear how fucked up I think this is, &lt;em&gt;a sample from a song that is literally about actual lynchings&lt;/em&gt;. Of course there are no jokes, though. &lt;em&gt;Yeezus&lt;/em&gt;&amp;rsquo;s idea of a joke is &amp;ldquo;I&amp;rsquo;m In It&amp;rdquo;&amp;rsquo;s oft-quoted but still execrable &amp;ldquo;eating Asian pussy, all I need is sweet and sour sauce.&amp;rdquo;</summary>
            <content type="html">&lt;p&gt;&lt;em&gt;Yeezus&lt;/em&gt; makes me uncomfortable. I don&amp;rsquo;t doubt that this is a large part of the reaction Kanye West is trying to provoke. &lt;em&gt;Yeezus&lt;/em&gt; is uncomfortable music: all sawblade synths, queasy riffs, samples appearing from nowhere and disappearing just as abruptly. But shit, I fuck with Death Grips and Clipping too. The industrial techno glitch crunk grime beats or whatever are novel for Yeezy and well suited to the aggression he brings to his raps here, but they don&amp;rsquo;t make me uncomfortable. What makes me uncomfortable is &lt;em&gt;Yeezus&lt;/em&gt;&amp;rsquo;s lack of apparent sense of humor or even self-awareness as Kanye West flings that aggression outwards in all directions. Nowhere is this more jarring or nauseating than when, in &amp;ldquo;&lt;a href=&#34;http://www.youtube.com/watch?v=D0QcxWPB59o&#34;&gt;Blood on the Leaves&lt;/a&gt;&amp;rdquo;, Kanye repurposes &amp;ldquo;Strange Fruit&amp;rdquo;, a song about lynchings, into yet another screed against women using marriage (or, as he terms it, &amp;ldquo;unholy matrimony&amp;rdquo;) to soak men for their money. It&amp;rsquo;s &amp;ldquo;Gold Digger&amp;rdquo; again, except with all the winking and jokes replaced by, in case I haven&amp;rsquo;t made it clear how fucked up I think this is, &lt;em&gt;a sample from a song that is literally about actual lynchings&lt;/em&gt;. Of course there are no jokes, though. &lt;em&gt;Yeezus&lt;/em&gt;&amp;rsquo;s idea of a joke is &amp;ldquo;I&amp;rsquo;m In It&amp;rdquo;&amp;rsquo;s oft-quoted but still execrable &amp;ldquo;eating Asian pussy, all I need is sweet and sour sauce.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Yeezus&lt;/em&gt; isn&amp;rsquo;t all that terrible; in fact, most of my objections concern the lyrics. Musically, it&amp;rsquo;s everything its admirers say it is: trite as it may be, I have no problem calling it a &lt;em&gt;daring&lt;/em&gt; step for Kanye, or a &lt;em&gt;bold&lt;/em&gt; and &lt;em&gt;uncompromising&lt;/em&gt; album coming from a man who is surely accustomed to having radio play. The only concession to radio-friendliness here is the presence of a few hooks, and even those are simple barked words or phrases as often as not: see the &lt;a href=&#34;http://www.youtube.com/watch?v=DdLsXB3AMAg&#34;&gt;first&lt;/a&gt; and &lt;a href=&#34;http://www.youtube.com/watch?v=BBAtAM7vtgc&#34;&gt;last&lt;/a&gt; (NSFW probably) songs. Nevertheless, the more I listen to it, the more I think I might end up liking the production here more than on any other Kanye album. Given different subject matter, &lt;em&gt;Blood on the Leaves&lt;/em&gt; might have been one of my favorite songs of the year. The brass that comes charging in at intervals is thrilling and foreboding, just one striking element of an instrumental that brings together so many disparate elements that it&amp;rsquo;s a wonder it works at all. The whole album is kind of like &amp;ldquo;Monster&amp;rdquo;, one of my favorite cuts from &lt;em&gt;My Beautiful Dark Twisted Fantasy&lt;/em&gt;, with the alienation and antagonism cranked up even further. Every one of the ten songs here has at least one line that makes me cringe.&lt;/p&gt;

&lt;p&gt;In the end, I find &lt;em&gt;Yeezus&lt;/em&gt; fascinating as a portrait of an extremely powerful and influential man nonetheless railing against his own powerlessness. &amp;ldquo;I Am A God&amp;rdquo; sums this up tidily, starting with its title (which at no point seems to be meant with any degree of irony) and ending with Kanye&amp;rsquo;s bloodcurdling screams, half terror and half frustration. They&amp;rsquo;re hardly the screams of someone who really thinks he&amp;rsquo;s a god, and it&amp;rsquo;s far more interesting to view his lazy, misogynistic, deadly self-serious lyrics as a façade over the turmoil of the production&amp;ndash;one that gets pulled back, briefly and at the moment it seems thickest, for those screams&amp;ndash;than to take them at face value. Because for all his power and fame, Kanye can&amp;rsquo;t stop the armchair psychiatrists of the world (including me) from diagnosing him every time he says what&amp;rsquo;s on his mind in an interview, can&amp;rsquo;t smash all the recorders that must hound him every time he&amp;rsquo;s out in public, can&amp;rsquo;t force the fashion world to take him seriously by dint of his myriad nigh-unimpeachable musical achievements. Can&amp;rsquo;t keep his mother from dying.&lt;/p&gt;

&lt;p&gt;So in the face of this larger impotence, his lyrics find him still flaunting his wealth, raging about croissants, and of course, debasing and ejaculating in and on as many women as possible.  Punching down is a time-honored tradition among people who feel powerless, so it&amp;rsquo;s not surprising to see Kanye doing it here if you accept the last paragraph&amp;rsquo;s thesis. But that doesn&amp;rsquo;t make it any less disappointing.&lt;/p&gt;

&lt;p&gt;No one psychoanalyzes Death Grips&amp;mdash;who now have four albums and counting suffused with far more schizophrenic paranoia than &lt;em&gt;Yeezus&lt;/em&gt; has even in its worst moments&amp;mdash;like this. But Death Grips never wrote a &amp;ldquo;&lt;a href=&#34;http://www.youtube.com/watch?v=3ZOy6t1vVtE&#34;&gt;Roses&lt;/a&gt;&amp;rdquo; or &amp;ldquo;&lt;a href=&#34;http://www.youtube.com/watch?v=L7_jYl8A73g&#34;&gt;Runaway&lt;/a&gt;&amp;rdquo;, nothing to indicate that their shtick is anything other than just a shtick; they give few interviews and reveal little in them. Kanye&amp;rsquo;s whole life is a public spectacle, and while he might be playing a character on his albums, part of what makes his music compelling is that his songs seem to be come from an authentic, unfiltered place in him. Their details often match up with what we know of his life, and they have often revealed a complexity that is not much in evidence in the lyrics of &lt;em&gt;Yeezus&lt;/em&gt;. I think that&amp;rsquo;s to its detriment, so I try to read complexity into it elsewhere. To an extent, Mr. West has earned the benefit of the doubt from me. But &lt;em&gt;Yeezus&lt;/em&gt; is gross in too many trite and unchallenging ways for him to have earned a spot among my top ten this year.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Thanks to my friend Mary, a couple of whose thoughts in conversation about this album I have probably either knowingly or unknowingly incorporated into this post.&lt;/small&gt;&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Julia Holter, &lt;em&gt;Loud City Song;&lt;/em&gt; Yamantaka // Sonic Titan, &lt;em&gt;UZU&lt;/em&gt;</title>
            <link rel="alternate" href="http://ian.mccowan.space/2013/12/08/Loud_City_Song_UZU/" type="text/html" />
            <id>http://ian.mccowan.space/2013/12/08/Loud_City_Song_UZU/</id>
            <updated>2013-12-08T21:51:00Z</updated>
            
            <summary type="html">Sonically, these two albums couldn&amp;rsquo;t be much more different. &lt;em&gt;Loud City Song&lt;/em&gt; is a mellow, generally very quiet and unassuming &lt;a href=&#34;http://juliashammasholter.com/&#34;&gt;Julia Holter&lt;/a&gt; joint, ecstatically praised by music critics as was its predecessor, last year&amp;rsquo;s &lt;em&gt;Ekstasis&lt;/em&gt;. &lt;em&gt;UZU&lt;/em&gt;, on the other hand, is the long-awaited bombastic, diverse debut full-length from the Canadian visual art/music collective Yamantaka // Sonic Titan.</summary>
            <content type="html">&lt;p&gt;Sonically, these two albums couldn&amp;rsquo;t be much more different. &lt;em&gt;Loud City Song&lt;/em&gt; is a mellow, generally very quiet and unassuming &lt;a href=&#34;http://juliashammasholter.com/&#34;&gt;Julia Holter&lt;/a&gt; joint, ecstatically praised by music critics as was its predecessor, last year&amp;rsquo;s &lt;em&gt;Ekstasis&lt;/em&gt;. &lt;em&gt;UZU&lt;/em&gt;, on the other hand, is the long-awaited bombastic, diverse debut full-length from the Canadian visual art/music collective Yamantaka // Sonic Titan.&lt;/p&gt;

&lt;p&gt;My expectations of how much I&amp;rsquo;d enjoy them also differed hugely. I didn&amp;rsquo;t know what to do with &lt;em&gt;Ekstasis&lt;/em&gt; and while it was interesting and novel, it never clicked with me at all. (This started to feel like a personal failing on my part when I saw someone compare it to Owen Pallett&amp;rsquo;s &lt;em&gt;Heartland&lt;/em&gt;, my second favorite album of 2010 and probably the one from that year with the most staying power.) But Yamantaka // Sonic Titan&amp;rsquo;s mini-album &lt;em&gt;YT // ST&lt;/em&gt; intrigued me by mixing charming, percussive pop (&amp;ldquo;&lt;a href=&#34;http://www.youtube.com/watch?v=k472YAVzoGU&#34;&gt;Hoshi Neko&lt;/a&gt;&amp;rdquo;) and punishing, endurance-testing hard rock (&amp;ldquo;A Star Over Pureland&amp;rdquo;) and managing to stay cohesive, a bit like a more serious, more proggy Deerhoof. I wasn&amp;rsquo;t always in the mood for &lt;em&gt;YT // ST&lt;/em&gt;, but every time I listened to it I liked it more. So I was really looking forward to &lt;em&gt;UZU&lt;/em&gt;, whereas &lt;em&gt;Loud City Song&lt;/em&gt; I picked up mostly out of curiosity and the hope of redeeming myself for my inability to appreciate &lt;em&gt;Ekstasis&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Well, neither made it into my top 10, but &lt;em&gt;Loud City Song&lt;/em&gt; I liked considerably more than its predecessor, and &lt;em&gt;UZU&lt;/em&gt; a great deal less, and I&amp;rsquo;m lumping them together because of one characteristic that they, somewhat amazingly, share: rapping!&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m using the loose &lt;a href=&#34;http://en.wikipedia.org/wiki/Rapping&#34;&gt;Wikipedia definition&lt;/a&gt; of rapping, here—&amp;quot;spoken or chanted rhyming lyrics&amp;quot;—but both albums feature parts that fall in that category quite neatly. The difference goes a surprisingly long way toward explaining my reaction to each album. The rapping on &lt;em&gt;Loud City Song&lt;/em&gt; is curious, but of a piece with the rest of the album: still quiet and contemplative, concerned with cocktail parties in the &lt;a href=&#34;http://www.youtube.com/watch?v=7paoM2cghjI&#34;&gt;two&lt;/a&gt; &lt;a href=&#34;http://www.youtube.com/watch?v=Bwu6bZDRWOM&#34;&gt;iterations&lt;/a&gt; of &amp;ldquo;Maxim&amp;rsquo;s&amp;rdquo; and the &amp;ldquo;flavor to the sound of walking&amp;rdquo; in &amp;ldquo;&lt;a href=&#34;http://www.youtube.com/watch?v=H5M8qRN_Rl0&#34;&gt;In the Green Wild&lt;/a&gt;&amp;rdquo;. It lends the songs in which it appears a focus on rhythm whose lack was, I think, part of what kept me from getting into &lt;em&gt;Ekstasis&lt;/em&gt;. I like it. Listen to &lt;em&gt;Ekstasis&lt;/em&gt; and the prospect of Julia Holter rapping will seem absurd, but here it feels like a natural extension of &lt;em&gt;Loud City Song&lt;/em&gt;&amp;rsquo;s sound. I still can&amp;rsquo;t make heads or tails of most of the lyrics, and most of the melodies aren&amp;rsquo;t strong enough to keep me trying. But the instrumentation is more diverse than on &lt;em&gt;Ekstasis&lt;/em&gt; and used well to create atmosphere. Atmospheric music is just not really my thing, I think.&lt;/p&gt;

&lt;p&gt;The rapping on &lt;em&gt;UZU&lt;/em&gt; is also a fairly natural extension of what&amp;rsquo;s elsewhere on the album, but unfortunately I find it dreadful. It ruins &lt;a href=&#34;http://m.youtube.com/watch?v=89iO84vztyM&#34;&gt;the track on which it appears&lt;/a&gt; for me and causes me to be preoccupied with its dreadfulness every time I think about listening to &lt;em&gt;UZU&lt;/em&gt;. I can&amp;rsquo;t find other reviews complaining about the utter dreadfulness of this rapping, so maybe this is all just my own biases, but I say if you sound like what I imagine &lt;a href=&#34;http://achewood.com/index.php?date=12262006&#34;&gt;Mister Band&lt;/a&gt; sounds like, it&amp;rsquo;s game over.&lt;/p&gt;

&lt;p&gt;And it&amp;rsquo;s a shame, because there&amp;rsquo;s plenty of other enjoyable stuff on &lt;em&gt;UZU&lt;/em&gt; that shouldn&amp;rsquo;t be overlooked: more slow, quiet songs than on &lt;em&gt;YT // ST&lt;/em&gt;, for example, some of them quite affecting. The opening couplet of the last track, &amp;ldquo;Saturn&amp;rsquo;s Return&amp;rdquo;, is sung tenderly despite its ominous content: &amp;ldquo;Promises made long ago / set fire to the earth below.&amp;rdquo; That&amp;rsquo;s an intriguing enough piece of a story that it makes me want to listen to the rest of the album to see if I can find out what those promises were, and the ponderous piano in the backing track is a nice counterweight to the rollicking drums of &amp;ldquo;Bring Me the Hand of Bloody Benzaiten&amp;rdquo; and the thick, heavy guitars of &amp;ldquo;&lt;a href=&#34;http://www.youtube.com/watch?v=KH3X4D0NyS8&#34;&gt;One&lt;/a&gt;.&amp;rdquo; This album&amp;rsquo;s pretty heavily backloaded, I think, and I like that.&lt;/p&gt;

&lt;p&gt;But please save me from that dreadful rapping. I think it is symptomatic of one of the main reasons I don&amp;rsquo;t like &lt;em&gt;UZU&lt;/em&gt; as much as &lt;em&gt;YT // ST&lt;/em&gt;: it seems to take itself far more seriously. Too seriously, I feel, for a band that previously recorded &amp;ldquo;Hoshi Neko&amp;rdquo; and claims on their &lt;a href=&#34;http://paperbagrecords.com/artists/yamantaka-sonic-titan&#34;&gt;label&amp;rsquo;s page&lt;/a&gt; to merge &amp;ldquo;heavy metal’s brutish assault with Japanese manga’s cartoonish appeal&amp;rdquo;. &lt;em&gt;UZU&lt;/em&gt; has the brutish assault, but none of the cartoonish appeal. It&amp;rsquo;s not as &lt;em&gt;fun&lt;/em&gt; as its predecessor. So it&amp;rsquo;s not a bad album (aside from that rapping, I cannot emphasize that enough), but it won&amp;rsquo;t end up on my top 10 list.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Woodkid, &lt;i&gt;The Golden Age&lt;/i&gt;</title>
            <link rel="alternate" href="http://ian.mccowan.space/2013/12/01/The_Golden_Age/" type="text/html" />
            <id>http://ian.mccowan.space/2013/12/01/The_Golden_Age/</id>
            <updated>2013-12-01T01:57:00Z</updated>
            
            <summary type="html">The musician who records under the name &amp;ldquo;Woodkid&amp;rdquo; is a Frenchman whose first full length album &lt;em&gt;The Golden Age&lt;/em&gt; is thoroughly lushly orchestrated but doesn&amp;rsquo;t skimp on the percussion. His beautiful, unique voice has the timbre of a bass clarinet and an accent that sounds, to my ears, not just not French but barely of this world. Over a bed of strings and horns that ebb and swell in all the right ways and drums that boom or clatter as appropriate, he deploys that voice in a way that I can only describe as &amp;ldquo;bloodless&amp;rdquo; in the hope of conveying why this album doesn&amp;rsquo;t resonate with me nearly as much as it seems to want to.</summary>
            <content type="html">&lt;p&gt;The musician who records under the name &amp;ldquo;Woodkid&amp;rdquo; is a Frenchman whose first full length album &lt;em&gt;The Golden Age&lt;/em&gt; is thoroughly lushly orchestrated but doesn&amp;rsquo;t skimp on the percussion. His beautiful, unique voice has the timbre of a bass clarinet and an accent that sounds, to my ears, not just not French but barely of this world. Over a bed of strings and horns that ebb and swell in all the right ways and drums that boom or clatter as appropriate, he deploys that voice in a way that I can only describe as &amp;ldquo;bloodless&amp;rdquo; in the hope of conveying why this album doesn&amp;rsquo;t resonate with me nearly as much as it seems to want to.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not even that Woodkid&amp;rsquo;s singing is homogeneous, exactly: as a straightforward example, there&amp;rsquo;s a clear contrast between the muted verses and the more unrestrained chorus in &amp;ldquo;&lt;a href=&#34;http://www.youtube.com/watch?v=bTqufHTcti0&#34;&gt;Conquest of Spaces&lt;/a&gt;&amp;rdquo;. Even during the latter, though, it still feels like Woodkid is holding back. He never really seems to cut loose and just &lt;em&gt;bellow&lt;/em&gt; like I&amp;rsquo;m pretty sure he can and like the huge arrangements make me want him to; neither does his voice ever deviate much from a sort of emotional equilibrium. As you can hear in &amp;ldquo;Conquest of Spaces&amp;rdquo;, it mostly varies only in volume.&lt;/p&gt;

&lt;p&gt;So, unfortunately, the closest this album comes to emotional resonance is in the late ballad &amp;ldquo;&lt;a href=&#34;http://www.youtube.com/watch?v=t3LlofjeiSI&#34;&gt;Where I Live&lt;/a&gt;&amp;rdquo;: we get a hint of desperation in Woodkid&amp;rsquo;s raspy voice in the choruses and his near-gasps for breath in between lines. But in the next song and first single &amp;ldquo;&lt;a href=&#34;http://vimeo.com/21604065&#34;&gt;Iron&lt;/a&gt;&amp;rdquo;,  he&amp;rsquo;s back to mostly letting the horns and drums take the reins. Don&amp;rsquo;t get me wrong, they do it admirably, the horns blaring out a hook that&amp;rsquo;s three parts martial and one part mournful before dropping into a dark percussion groove. The instrumentation on this album is &lt;em&gt;epic&lt;/em&gt;, and I mean that in the sense that it was meant before people on the Internet started using it to talk about their grilled cheese sandwiches and shit: if at least one of these songs don&amp;rsquo;t appear on a movie soundtrack inside of two years, I will be &lt;em&gt;shocked&lt;/em&gt;. Listen to the first twenty seconds of &amp;ldquo;&lt;a href=&#34;http://www.youtube.com/watch?v=NxNIT5hM8c0&#34;&gt;The Great Escape&lt;/a&gt;&amp;rdquo; if you want to hear the kind of thing I&amp;rsquo;m talking about.&lt;/p&gt;

&lt;p&gt;I think the convincing filmic atmosphere of this album is is the key to the other reason it doesn&amp;rsquo;t hit home with me, though: there are few examples of its seeming to take many risks. In retrospect I alluded to this in the opening paragraph: every aspect of these songs, from the fist pumpers to the ballads, seems to fall along well-trod paths. It&amp;rsquo;s hard to qualify this feeling, but the paucity of emotion combined with the nagging impression that any given thirty-second excerpt was created for maximal soundtrack uptake makes these songs feel assembled rather than created.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s unfortunate that &lt;em&gt;The Golden Age&lt;/em&gt; doesn&amp;rsquo;t resonate with me, because if it did it&amp;rsquo;s so well executed that it&amp;rsquo;d probably be one of my favorite albums of the year.  But in the end, I don&amp;rsquo;t feel much when I listen to it: some admiration, maybe, for the craft. But that&amp;rsquo;s not enough.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>An Amendment to an Android Widget Tutorial</title>
            <link rel="alternate" href="http://ian.mccowan.space/2013/11/09/Android_Widget_Tutorial_Amendment/" type="text/html" />
            <id>http://ian.mccowan.space/2013/11/09/Android_Widget_Tutorial_Amendment/</id>
            <updated>2013-11-09T02:34:00Z</updated>
            
            <summary type="html">I&amp;rsquo;m trying to make an Android widget, and &lt;a href=&#34;https://www.google.com/search?&amp;amp;q=android+widget+programming&#34;&gt;Google turned up&lt;/a&gt; a &lt;a href=&#34;http://kasperholtze.com/android/how-to-make-a-simple-android-widget/trackback/&#34;&gt;pretty straightforward and well-presented tutorial&lt;/a&gt; that I decided to follow to get a feel for things.</summary>
            <content type="html">&lt;p&gt;I&amp;rsquo;m trying to make an Android widget, and &lt;a href=&#34;https://www.google.com/search?&amp;amp;q=android+widget+programming&#34;&gt;Google turned up&lt;/a&gt; a &lt;a href=&#34;http://kasperholtze.com/android/how-to-make-a-simple-android-widget/trackback/&#34;&gt;pretty straightforward and well-presented tutorial&lt;/a&gt; that I decided to follow to get a feel for things.&lt;/p&gt;

&lt;p&gt;The tutorial was fairly easy to follow aside from the text boxes that were too narrow for the code samples, but it had some bits that were either out of date or, more likely, just wrong. So without further ado, I present some errata:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;In step 4, you edit the widget&amp;rsquo;s &lt;code&gt;main.xml&lt;/code&gt; file, which the tutorial doesn&amp;rsquo;t explain should be located in &lt;code&gt;res/layout&lt;/code&gt; in your project. Most of it works, but:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;android:id&lt;/code&gt; attribute of the &lt;code&gt;LinearLayout&lt;/code&gt; tag is wrong, which is unfortunate. The tutorial mentions in step 3 that Eclipse will complain about &lt;code&gt;R.id.widget_textview&lt;/code&gt; and that it will be created shortly. It also mentions in step 4 that &amp;ldquo;the important thing is the id of our TextView, which we used earlier in the WatchWidget class.&amp;rdquo; But then it &lt;em&gt;still&lt;/em&gt; gets it wrong. Oh well. The value of the &lt;code&gt;android:id&lt;/code&gt; attribute should actually be &lt;code&gt;&amp;quot;@+id/widget_textview&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m fairly certain the widget background stuff is out of date. The background given is a single image, but the link to the Android docs take you to a page where the only available download is a whole folder of stuff.
I don&amp;rsquo;t know how to use the single image provided, so I used the download instead. It contains a &lt;code&gt;res&lt;/code&gt; folder with a bunch of folders starting with &lt;code&gt;drawable&lt;/code&gt; in it. Their names were similar to those in my Android project&amp;rsquo;s &lt;code&gt;res&lt;/code&gt; directory, so I copied the icons generated by ADT when I set up my project into the downloaded &lt;code&gt;drawable&lt;/code&gt; folders and then copied them wholesale into my project, replacing the ones that already existed.&lt;/li&gt;
&lt;li&gt;If you use the downloaded resources from the Android docs like I did, you have to change the &lt;code&gt;android:background&lt;/code&gt; attribute of the &lt;code&gt;LinearLayout&lt;/code&gt; tag of &lt;code&gt;main.xml&lt;/code&gt; to &lt;code&gt;@drawable/appwidget_bg&lt;/code&gt;. Without knowing too much about it, I believe the downloaded folder contains different resources for different screen sizes. &lt;a href=&#34;http://developer.android.com/guide/practices/screens_support.html&#34;&gt;This seems to be the relevant part of the Android docs.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Step 5 has you edit &lt;code&gt;AndroidManifest.xml&lt;/code&gt;. But it refers to a receiver named &lt;code&gt;WatchWidgetActivity&lt;/code&gt;, which doesn&amp;rsquo;t exist because in step 1 you unchecked &amp;ldquo;Create Activity&amp;rdquo;. It should instead refer to your AppWidgetProvider subclass. So change &lt;code&gt;.WatchWidgetActivity&lt;/code&gt; to &lt;code&gt;WatchWidget&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I think it&amp;rsquo;s a minor issue, but in step 4, Eclipse will complain about your setting the attribute &lt;code&gt;android:text&lt;/code&gt; to a string literal. It should instead point to a string resource, because this aids greatly in &lt;a href=&#34;http://developer.android.com/guide/topics/resources/localization.html&#34;&gt;localization&lt;/a&gt;. So to fix the warning, change the value of &lt;code&gt;android:text&lt;/code&gt; to (say) &lt;code&gt;@string/test_time&lt;/code&gt;. Then open the file &lt;code&gt;res/values/strings.xml&lt;/code&gt; and add a new String resource whose name should be &lt;code&gt;test_time&lt;/code&gt;. Its value can be whatever you want.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;In step 6, &lt;code&gt;android:updatePeriodMillis&lt;/code&gt; is set to &lt;code&gt;1000&lt;/code&gt;. Having any widget refresh once every second is probably a terrible idea. I set mine to &lt;code&gt;600000&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>Cuisine Cascades</title>
            <link rel="alternate" href="http://ian.mccowan.space/2013/09/29/Cuisine_Cascades/" type="text/html" />
            <id>http://ian.mccowan.space/2013/09/29/Cuisine_Cascades/</id>
            <updated>2013-09-29T19:06:00Z</updated>
            
            <summary type="html">For a while in high school my mom and I went to an Indian buffet every Sunday, which had good and bad effects on my ability to cook for myself. On the one hand, it taught me about the variety of dishes in Indian cuisine; on the other hand, any Indian meal that lacks that variety now feels incomplete. And I can&amp;rsquo;t make an entire Indian buffet myself. Not in one night, anyway.</summary>
            <content type="html">&lt;p&gt;For a while in high school my mom and I went to an Indian buffet every Sunday, which had good and bad effects on my ability to cook for myself. On the one hand, it taught me about the variety of dishes in Indian cuisine; on the other hand, any Indian meal that lacks that variety now feels incomplete. And I can&amp;rsquo;t make an entire Indian buffet myself. Not in one night, anyway.&lt;/p&gt;

&lt;p&gt;What I can manage in one night is maybe two or three dishes: something time-consuming like chickpeas started in the morning or the previous night in a slow cooker, alongside a quicker dish like matar paneer and maybe something near-trivial like yellow dal cooked the night of. That&amp;rsquo;s enough of a spread to feel like the real deal, and such is the nature of Indian food that there are usually several days&amp;#39; worth of leftovers for each.&lt;/p&gt;

&lt;p&gt;So that&amp;rsquo;s when the fun begins, because (often with continued judicious use of the slow cooker) I can then make another dish every night or every other night for a while until I have five or six different dishes available. That&amp;rsquo;s pretty much a whole buffet&amp;rsquo;s worth of choices, and if I&amp;rsquo;m disciplined about eating the older things first, I can ensure that none of it goes to waste by tossing the remnants in the freezer when the selection tapers off. Then I can use those to kickstart things the next time I want to eat a whole bunch of Indian food.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Does Python Cuddle?</title>
            <link rel="alternate" href="http://ian.mccowan.space/2013/08/06/Python_Cuddles/" type="text/html" />
            <id>http://ian.mccowan.space/2013/08/06/Python_Cuddles/</id>
            <updated>2013-08-06T00:25:00Z</updated>
            
            <summary type="html">In one of my semi-regular Complain About Perl sessions with a coworker, we found ourselves looking at the &lt;a href=&#34;http://perldoc.perl.org/perlstyle.html&#34;&gt;Perl Style Guide&lt;/a&gt;. Something caught my eye almost immediately:</summary>
            <content type="html">&lt;p&gt;In one of my semi-regular Complain About Perl sessions with a coworker, we found ourselves looking at the &lt;a href=&#34;http://perldoc.perl.org/perlstyle.html&#34;&gt;Perl Style Guide&lt;/a&gt;. Something caught my eye almost immediately:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Uncuddled elses.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is apparently one of Larry Wall&amp;rsquo;s stylistic preferences for Perl code, which means the creator of Perl is on record as being &lt;em&gt;anti-cuddles&lt;/em&gt;, which is just one more reason for me to despise Perl. I was led naturally to wonder whether Python is a pro-cuddle language. But what are cuddled elses? The venerable &lt;a href=&#34;http://c2.com/cgi/wiki?CuddledElseBlocks&#34;&gt;c2 wiki&lt;/a&gt; comes to the rescue:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In an &amp;ldquo;if-then-else&amp;rdquo; statement, the following are examples of &amp;ldquo;cuddled&amp;rdquo; and &amp;ldquo;uncuddled&amp;rdquo; elses in C:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;|  &amp;#x2F;* cuddled &amp;quot;else&amp;quot; *&amp;#x2F;  |  &amp;#x2F;* uncuddled &amp;quot;else&amp;quot; *&amp;#x2F;   
|  if (x &amp;gt; 0) {          |  if (x &amp;gt; 0) {   
|      x += y;           |      x += y;   
|  } else {              |  }   
|      y += x;           |  else {   
|  }                     |      y +=x;   
                         |  }   
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;

&lt;p&gt;Well, Python doesn&amp;rsquo;t have braces at all. But thanks to its syntactically significant indentation, its if/else statements more closely resemble the lefthand example than the one on the right. Because of this, I propose that Python can be said to have &lt;em&gt;phantom cuddles&lt;/em&gt; for its elses. Rest easy, Python fans. My tergiversation puts Python firmly in the pro-cuddle camp.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Notes on Haskell</title>
            <link rel="alternate" href="http://ian.mccowan.space/2013/08/04/Notes_on_Haskell/" type="text/html" />
            <id>http://ian.mccowan.space/2013/08/04/Notes_on_Haskell/</id>
            <updated>2013-08-04T05:25:00Z</updated>
            
            <summary type="html">I have a fairly deep background in pure math, and Haskell appears to be the purest and mathiest of the many functional languages that are getting more and more fashionable of late. So while one of my close co-workers recently took a course in Scala and my boss has dipped his toes in Erlang, I&amp;rsquo;ve chosen Haskell for my introduction to the functional language craze. Now we just need two of my other fellow software engineers to delve into OCaml and F# and we&amp;rsquo;ll have a royal flush.</summary>
            <content type="html">&lt;p&gt;I have a fairly deep background in pure math, and Haskell appears to be the purest and mathiest of the many functional languages that are getting more and more fashionable of late. So while one of my close co-workers recently took a course in Scala and my boss has dipped his toes in Erlang, I&amp;rsquo;ve chosen Haskell for my introduction to the functional language craze. Now we just need two of my other fellow software engineers to delve into OCaml and F# and we&amp;rsquo;ll have a royal flush.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m still a rank amateur at Haskell and am going about it in a completely unsystematic way, but nevertheless I am making progress and wanted to document a couple recent breakthroughs of sorts that I&amp;rsquo;ve had with it. The first came so easily and elegantly that my eyes turned into hearts and I almost titled this blog post &amp;ldquo;Haskell is Cheating.&amp;rdquo; But then the second was a series of battles with foggy comprehension and unfamiliar paradigms that quickly eroded my optimism and then continued until I was nearly sure Haskell and I didn&amp;rsquo;t have a future.&lt;/p&gt;

&lt;p&gt;Eventually I worked it out, though, so now that I&amp;rsquo;ve bounced back a little I think I should document all this. The two breakthroughs came on &lt;a href=&#34;http://projecteuler.net/&#34;&gt;Project Euler&lt;/a&gt; problems 2 and 3, which is a little embarrassing but I did say I was a rank amateur. Just a little less of one today than I was yesterday.&lt;/p&gt;
&lt;h3&gt;Problem 2&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;http://projecteuler.net/problem=2&#34;&gt;Problem 2&lt;/a&gt; was a lark. The statement of the problem is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: &lt;br /&gt;
1, 2, 3, 5, 8, 13, 21, 34, 55, 89, &amp;hellip; &lt;br /&gt;
By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Generating Fibonacci numbers comes probably just after Hello World and finding factorials in the Beginner Programming Problems Hall of Fame, and a straightforward recursive solution is easy in Haskell:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;{&#34;&gt;fibo 0 = 0
fibo 1 = 1
fibo n = fibo (n - 1) + fibo (n - 2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But that solution won&amp;rsquo;t memoize: if you ask it for &lt;code&gt;fibo 156&lt;/code&gt; it calculates &lt;code&gt;fibo 0&lt;/code&gt; through &lt;code&gt;fibo 155&lt;/code&gt;, and then if you ask for &lt;code&gt;fibo 157&lt;/code&gt; it calculates them all again on its way.&lt;/p&gt;

&lt;p&gt;I came across another solution that took me a little time to understand:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;{haskell}&#34;&gt;fibs ∷ [Integer]
fibs = 0 : 1 : zipWith (+) fibs (tail fibs)

fibo ∷ Int → Integer
fibo n = fibs !! n
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first and retrospectively stupidest question I had was how this memoizes any better than the naive solution above, but that is obviously because &lt;code&gt;fibs&lt;/code&gt; is an infinite list. Thanks to Haskell&amp;rsquo;s lazy evaluation, it fills up only as far as we ask it to (using &lt;code&gt;fibo&lt;/code&gt;) and stores everything preceding that. Okay.&lt;/p&gt;

&lt;p&gt;The definition of &lt;code&gt;fibs&lt;/code&gt; puzzled me but not for too long: &lt;code&gt;zipwith&lt;/code&gt; combines corresponding elements of two lists using the predicate that it takes as its first argument. So &lt;code&gt;fibs&lt;/code&gt; seeds the list of Fibonacci numbers with the first two, then generates subsequent ones by summing corresponding elements of that list and itself sans its first element (&lt;code&gt;tail fibs&lt;/code&gt;). To put it another way, you get subsequent entries in fibs by summing what you&amp;rsquo;ve got so far with the same shifted up by one. Sort of like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;fibs      0 1 1 2 3 5  8 
tail fibs 1 1 2 3 5 8  13  etc...
sum       1 2 3 5 8 13 21
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Anyway, that was fine. What was beautiful, once I had that, was the actual solution to the problem. It looked like this:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;{haskell}&#34;&gt;sum $ filter even (takeWhile (&amp;lt; 4000000) fibs)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;which is about as close as you can get to just restating the problem in code. Read function applications from right to left: take Fibonacci numbers while they&amp;rsquo;re less than 40 million, filter out the even ones, and sum the result. It&amp;rsquo;s beautiful. That&amp;rsquo;s when my eyes turned into hearts.&lt;/p&gt;
&lt;h3&gt;Problem 3&lt;/h3&gt;
&lt;p&gt;Unfortunately, then there was &lt;a href=&#34;http://projecteuler.net/problem=3&#34;&gt;Problem 3&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The prime factors of 13195 are 5, 7, 13 and 29. &lt;br /&gt;
What is the largest prime factor of the number 600851475143?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;ve done a whole bunch of Euler Project problems in Python, and I found it very helpful to build up a library of useful functions along the way. So I didn&amp;rsquo;t just want to solve this problem; I wanted to use it as an opportunity to add a &lt;code&gt;factors&lt;/code&gt; function, which would take an integer &lt;code&gt;n&lt;/code&gt; and return a list of &lt;code&gt;n&lt;/code&gt;&amp;rsquo;s prime factors, to my repertoire. After I did so, the solution to Problem 3 was a joke:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;{haskell}&#34;&gt;last $ Euler.factors 600851475143
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Coming up with &lt;code&gt;factors&lt;/code&gt; was the part that gave me problems. Here&amp;rsquo;s the basic approach that I used and to which my eventual success hewed pretty closely:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Write a &lt;code&gt;divisible&lt;/code&gt; function to tell me if one number divides another. (This is just syntactic sugar for &lt;code&gt;n mod m = 0&lt;/code&gt;.)&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;divisible&lt;/code&gt; to find the first divisor &lt;code&gt;d&lt;/code&gt; of &lt;code&gt;n&lt;/code&gt; by checking everything between 1 and √n.&lt;/li&gt;
&lt;li&gt;Recursively call &lt;code&gt;factors&lt;/code&gt; on &lt;code&gt;n / d&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I&amp;rsquo;m sure this is far from optimal but I believe it&amp;rsquo;s the approach I used in Python, it worked pretty well there, and it seemed to me that it would work even better in Haskell. Well&amp;hellip;&lt;/p&gt;

&lt;p&gt;The most difficult thing about this problem actually turned out to be the √n part. Haskell has a built-in square root function for floating point numbers, of course, but unfortunately because of precision issues, just using it and then taking the floor of the result can &lt;a href=&#34;http://www.haskell.org/haskellwiki/Generic_number_type#squareRoot&#34;&gt;lead to wrong answers and overflow errors&lt;/a&gt; for large enough numbers. I&amp;rsquo;m making a repository of useful stuff, I want it to be better than that. So I went and swiped &lt;a href=&#34;http://haskellsolutions.blogspot.com/2009/02/integer-square-root-of-positive-integer.html&#34;&gt;some code based on Newton&amp;rsquo;s Method&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;{haskell}&#34;&gt;squareRoot ∷ Int → Int
squareRoot n 
    | n ==  1              = 1 
    | otherwise            = div (k + ( div n k)) 2
where k = squareRoot(n-1) 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I implemented everything else and tried it. It worked okay, but when I ran &lt;code&gt;factors&lt;/code&gt; on a six-digit number, it took probably ten to fifteen seconds. A back of the envelope calculation then yields about 200 days for the actual problem, assuming the runtime increased linearly, which it almost certainly would not have. Of course that didn&amp;rsquo;t matter, because when I compiled and ran the same test instead of using GHCi, I got a stack overflow error.&lt;/p&gt;

&lt;p&gt;I figured the problem was in my &lt;code&gt;factors&lt;/code&gt; definition. Some googling for the error yielded some interesting and, to me, unintuitive results about &lt;a href=&#34;http://www.haskell.org/haskellwiki/Tail_recursion&#34;&gt;tail recursion&lt;/a&gt;. Sure enough, &lt;code&gt;factors&lt;/code&gt; was not tail call recursive; my recursive call did a division and a list append after returning. I floundered about with some attempts to force &lt;a href=&#34;http://www.haskell.org/haskellwiki/Performance/Strictness&#34;&gt;strict evaluation&lt;/a&gt; but they were more or less at random and so of course yielded nothing. Finally I added an &lt;a href=&#34;http://www.haskell.org/haskellwiki/Performance/Accumulating_parameter&#34;&gt;accumulating parameter&lt;/a&gt; to &lt;code&gt;factors&lt;/code&gt; to make it properly tail recursive. The stack overflow persisted.&lt;/p&gt;

&lt;p&gt;OK. I decided to try some bigger guns and dip a toe into &lt;a href=&#34;http://www.haskell.org/ghc/docs/6.12.2/html/users_guide/prof-heap.html&#34;&gt;Haskell profiling&lt;/a&gt;. I realize now that that page says &lt;em&gt;heap&lt;/em&gt; profiling, whereas I had a &lt;em&gt;stack&lt;/em&gt; overflow, which may be why the option that seemed to be necessary for me wasn&amp;rsquo;t on it. In any case, I did some more random flailing about with command line options that produced useless files before compiling using &lt;code&gt;ghc -prof -auto-all&lt;/code&gt; and running with &lt;code&gt;./problem3 +RTS -p -hy&lt;/code&gt; to get something useful: a file named &lt;code&gt;problem3.prof&lt;/code&gt; that told me most of my time was actually being spent in &lt;code&gt;squareRoot&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;Treachery! That innocuous-looking code I&amp;rsquo;d pilfered from the web was terrible! And now that I looked at it again, why the hell was it recursing on &lt;code&gt;n - 1&lt;/code&gt;? That would seem to mean that calculating the square root of 261,315 would require doing the same for 261,314 other numbers as well!&lt;/p&gt;

&lt;p&gt;I scrapped that code and wrote a stupid binary search my damn self, using not one but two accumulating parameters to make sure it was tail-recursive. Here&amp;rsquo;s the result of my sweat and tears (no blood, I mean Jesus it&amp;rsquo;s just computer programming):&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;{haskell}&#34;&gt;squareRoot&amp;#x27; ∷ Integer → Integer → (Integer, Integer) → Integer
squareRoot&amp;#x27; n g (min, max)
    | g^2 &amp;lt; n   = if (g + 1)^2 &amp;gt; n
                      then g
                      else squareRoot&amp;#x27; n ((max + g) `div` 2) (g, max)
    | g^2 &amp;gt; n   = squareRoot&amp;#x27; n ((min + g) `div` 2) (min, g)
    | otherwise = g

squareRoot n = squareRoot&amp;#x27; n (n `div` 2) (0, n)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Needless to say, I&amp;rsquo;m not nearly as euphoric about this as I was about Problem 2. In fact I kind of hate this code. Accumulating parameters are gross and ugly and they make this function take way too many parameters.&lt;/p&gt;

&lt;p&gt;On the plus side, according to the same profiling I&amp;rsquo;d done before, it appears that my code ran in about 2 μs, which I must admit is a significant improvement on 200 days (if the old slow code was linear) or the lifespan of the universe (if it was exponential). At some point I may go back and see which of my optimizations were necessary, but I think I&amp;rsquo;m done touching this code for now. Fighting with it was demoralizing at first, but I think it was necessary for me to get a more realistic idea of how Haskell operates.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>Compiling Textual</title>
            <link rel="alternate" href="http://ian.mccowan.space/2013/07/20/Compiling_Textual/" type="text/html" />
            <id>http://ian.mccowan.space/2013/07/20/Compiling_Textual/</id>
            <updated>2013-07-20T02:29:00Z</updated>
            
            <summary type="html">Okay, I&amp;rsquo;m sure that by the time I need this again it will be defunct in some way because such is the nature of XCode, but nevertheless I&amp;rsquo;ve done this twice and struggled for way longer than necessary with what I think was more or less the same thing both times. So, for my own reference and that of anyone trying this for themselves, here&amp;rsquo;s the steps for how I successfully compiled &lt;a href=&#34;https://github.com/Codeux/Textual&#34;&gt;Textual&lt;/a&gt; 3.1.0 with XCode 4.6.3. These instructions assume you have XCode and Git installed and some basic familiarity with the command line.</summary>
            <content type="html">&lt;p&gt;Okay, I&amp;rsquo;m sure that by the time I need this again it will be defunct in some way because such is the nature of XCode, but nevertheless I&amp;rsquo;ve done this twice and struggled for way longer than necessary with what I think was more or less the same thing both times. So, for my own reference and that of anyone trying this for themselves, here&amp;rsquo;s the steps for how I successfully compiled &lt;a href=&#34;https://github.com/Codeux/Textual&#34;&gt;Textual&lt;/a&gt; 3.1.0 with XCode 4.6.3. These instructions assume you have XCode and Git installed and some basic familiarity with the command line.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Clone &lt;a href=&#34;https://github.com/Codeux/Textual.git&#34;&gt;the Textual repo&lt;/a&gt; into some directory. I used &lt;code&gt;~/Code/Textual&lt;/code&gt; and did it with the &lt;a href=&#34;http://mac.github.com/&#34;&gt;Mac Github app&lt;/a&gt; by clicking the &amp;ldquo;Clone in Desktop&amp;rdquo; button on the right side of &lt;a href=&#34;https://github.com/Codeux/Textual&#34;&gt;Textual&amp;rsquo;s Github page&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Check out a released version of Textual. Go to the folder where you checked it out and issue the command &lt;code&gt;git tag -l&lt;/code&gt; to list the available tags. Pick one (probably the one with the biggest number, I dunno) and do &lt;code&gt;git checkout tags/&amp;lt;tag&amp;gt;&lt;/code&gt; where &lt;tag&gt; is the tag you chose. In this case it was &lt;code&gt;v3.1.0&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Follow steps 3–5 in &lt;a href=&#34;http://www.numlock.ch/news/mac_os_x/how-to-compile-textual-open-source-irc-client-on-mac-os-x/&#34;&gt;these instructions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Open the &amp;ldquo;Frameworks&amp;rdquo; folder in your checked out Textual folder. It will have some subfolders in it: five, as of this writing. You care about three of them: &amp;ldquo;Auto Hyperlinks&amp;rdquo;, &amp;ldquo;Blowfish Encryption&amp;rdquo; and &amp;ldquo;System Information&amp;rdquo;. For each of these three, do the following:

&lt;ul&gt;
&lt;li&gt;Open the folder and then the &amp;ldquo;Source&amp;rdquo; subfolder.&lt;/li&gt;
&lt;li&gt;Drag the file with the &lt;code&gt;.xcodeproj&lt;/code&gt; extension onto the &amp;ldquo;Main Project (Textual)&amp;rdquo; project in the Project Navigator in XCode. The Project Navigator is the left-hand sidebar with the little folder icon at the top selected; you may have to left-most button above the &amp;ldquo;View&amp;rdquo; control in the toolbar to turn it on. &lt;a href=&#34;http://ian.mccowan.space/assets/images/posts/Compiling_Textual/Adding_Frameworks.png&#34; rel=&#34;bytebox&#34;&gt;Here&amp;rsquo;s a screenshot summing up what does where.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Turn off code signing for the resulting (sub?)project in XCode. That means repeat step 5 from the instructions linked in step 3 above.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Follow steps 6–8 in the &lt;a href=&#34;http://www.numlock.ch/news/mac_os_x/how-to-compile-textual-open-source-irc-client-on-mac-os-x/&#34;&gt;aforementioned instructions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The app will be in the &lt;code&gt;Build Results/Release&lt;/code&gt; subdirectory of your Textual checkout. Put it in your &lt;code&gt;Applications&lt;/code&gt; folder.&lt;/li&gt;
&lt;/ol&gt;
</content>
        </entry>
    
        <entry>
            <title>Converting a Module to a Package</title>
            <link rel="alternate" href="http://ian.mccowan.space/2013/07/17/Module_to_Package/" type="text/html" />
            <id>http://ian.mccowan.space/2013/07/17/Module_to_Package/</id>
            <updated>2013-07-17T23:02:00Z</updated>
            
            <summary type="html">It&amp;rsquo;s happened often (well, twice) that I&amp;rsquo;ve had a Python module that started to get a little too big for its britches: maybe approaching 1000 lines, maybe just including several subclasses which are related but really ought to have their own files. Documentation on the Python packaging system can be a bit daunting. I don&amp;rsquo;t think I need to use &lt;code&gt;setuptools&lt;/code&gt; or &lt;code&gt;distutils&lt;/code&gt; or &lt;code&gt;distribute&lt;/code&gt; because this module is intended only for the use of me and my team. I just want to organize my code better.</summary>
            <content type="html">&lt;p&gt;It&amp;rsquo;s happened often (well, twice) that I&amp;rsquo;ve had a Python module that started to get a little too big for its britches: maybe approaching 1000 lines, maybe just including several subclasses which are related but really ought to have their own files. Documentation on the Python packaging system can be a bit daunting. I don&amp;rsquo;t think I need to use &lt;code&gt;setuptools&lt;/code&gt; or &lt;code&gt;distutils&lt;/code&gt; or &lt;code&gt;distribute&lt;/code&gt; because this module is intended only for the use of me and my team. I just want to organize my code better.&lt;/p&gt;

&lt;p&gt;Making a module into a package is an easy way to make it possible to split it into different source files which are all available under the same name. In simple cases, you can do it with zero modification to the code that imports the module. As a very basic example: say you have a module in your &lt;code&gt;PYTHONPATH&lt;/code&gt; named &lt;code&gt;parts.py&lt;/code&gt; with two classes, &lt;code&gt;Widget&lt;/code&gt; and &lt;code&gt;Grommet&lt;/code&gt;. You want these two classes to have their own files, but still import them from &lt;code&gt;parts&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, create a directory named &lt;code&gt;parts&lt;/code&gt; in the same location and two files named &lt;code&gt;Widget.py&lt;/code&gt; and &lt;code&gt;Grommet.py&lt;/code&gt; in it; move the source for each class into the corresponding file. Then create a text file in the &lt;code&gt;parts&lt;/code&gt; directory named &lt;code&gt;__init__.py&lt;/code&gt;. Edit &lt;code&gt;__init__.py&lt;/code&gt; and add the following:&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;{&#34;&gt;from Widget import Widget
from Grommet import Grommet
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This makes &lt;code&gt;Widget&lt;/code&gt; and &lt;code&gt;Grommet&lt;/code&gt; accessible by using, e.g., &lt;code&gt;from parts import Widget&lt;/code&gt; or&lt;/p&gt;
&lt;pre&gt;&lt;code data-lang=&#34;{&#34;&gt;import parts
parts.Widget
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;just as when the two were both in the &lt;code&gt;parts.py&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;Widget&lt;/code&gt; and &lt;code&gt;Grommet&lt;/code&gt; have some shared code, you can put that code in a third file, alongside the files for the two classes, and import it into those files normally. Now if you want to, say, add a subclass to &lt;code&gt;Widget&lt;/code&gt;, you can do so in &lt;code&gt;Widget.py&lt;/code&gt; without cluttering up the &lt;code&gt;Grommet&lt;/code&gt; code.&lt;/p&gt;
</content>
        </entry>
    
        <entry>
            <title>2013 Music Halfway Point</title>
            <link rel="alternate" href="http://ian.mccowan.space/2013/07/16/2013_Music_Halfway_Point/" type="text/html" />
            <id>http://ian.mccowan.space/2013/07/16/2013_Music_Halfway_Point/</id>
            <updated>2013-07-16T04:44:00Z</updated>
            
            <summary type="html">It&amp;rsquo;s over halfway through 2013 so I&amp;rsquo;m taking a second to jot down my potential favorite albums so far this year. Alphabetically by artist:</summary>
            <content type="html">&lt;p&gt;It&amp;rsquo;s over halfway through 2013 so I&amp;rsquo;m taking a second to jot down my potential favorite albums so far this year. Alphabetically by artist:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The Baptist Generals, &lt;em&gt;Jackleg Devotional to the Heart&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Buke and Gase, &lt;em&gt;General Dome&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Cakes Da Killa, &lt;em&gt;The Eulogy&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Chance The Rapper, &lt;em&gt;Acid Rap&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;clipping, &lt;em&gt;midcity&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Jenny Hval, &lt;em&gt;Innocence is Kinky&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;K. Flay, &lt;em&gt;West Ghost&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;The Knife, &lt;em&gt;Shaking the Habitual&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;KOOL A.D., &lt;em&gt;19&lt;/em&gt; and &lt;em&gt;63&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Lady Lamb the Beekeeper, &lt;em&gt;Ripely Pine&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Laura Stevenson, &lt;em&gt;Wheel&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Run the Jewels, &lt;em&gt;Run the Jewels&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;TORRES, &lt;em&gt;TORRES&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Vampire Weekend, &lt;em&gt;Modern Vampires of the City&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Waxahatchee, &lt;em&gt;Cerulean Salt&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        </entry>
    
        <entry>
            <title>StringIO</title>
            <link rel="alternate" href="http://ian.mccowan.space/2013/06/21/StringIO/" type="text/html" />
            <id>http://ian.mccowan.space/2013/06/21/StringIO/</id>
            <updated>2013-06-21T00:46:00Z</updated>
            
            <summary type="html">I recently discovered the &lt;code&gt;StringIO&lt;/code&gt; module and have been using it surprisingly often. It&amp;rsquo;s not a terribly flashy module, being roughly equivalent to a C++ &lt;code&gt;stringstream&lt;/code&gt;, but it is proving useful more than I expected. There are a couple use cases that have come up more than once just in the last couple weeks:</summary>
            <content type="html">&lt;p&gt;I recently discovered the &lt;code&gt;StringIO&lt;/code&gt; module and have been using it surprisingly often. It&amp;rsquo;s not a terribly flashy module, being roughly equivalent to a C++ &lt;code&gt;stringstream&lt;/code&gt;, but it is proving useful more than I expected. There are a couple use cases that have come up more than once just in the last couple weeks:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;m trying to run a command that produces output to stdout and read that output with a function that expects a file. Instead of piping the command&amp;rsquo;s output to a file, I can just initialize a &lt;code&gt;StringIO&lt;/code&gt; with the result of &lt;code&gt;subprocess.check_output()&lt;/code&gt; and pass it into the function. Intermediate files suck and I hate them. Using a &lt;code&gt;StringIO&lt;/code&gt;, by contrast, is so fresh and so clean, clean.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m trying to write unit tests for functions or methods that read things from files. A unit test that depends on a file isn&amp;rsquo;t very, you know, unit-y. So instead I can keep it all in the test suite by putting the contents of a test file into a &lt;code&gt;StringIO&lt;/code&gt; and passing that to the function or method I want to test. Poof, no filthy, error-prone external files sitting around and begriming the purity of my unit tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In retrospect, at least the second of these things seems obvious: like it should be a bog-standard way to write unit tests that don&amp;rsquo;t depend on external resources. But I&amp;rsquo;ve done a fair amount of cruising StackOverflow and other places looking at Python unit test best practices and haven&amp;rsquo;t ever stumbled across it before.&lt;/p&gt;
</content>
        </entry>
    
</feed>